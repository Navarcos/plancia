{
    "swagger": "2.0",
    "info": {
        "description": "rest api for navarcos",
        "title": "Plancia Api",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/v1/api",
    "paths": {
        "/dockerSkafos": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "DockerSkafos"
                ],
                "summary": "create dockerSkafos",
                "operationId": "create-docker-skafos",
                "parameters": [
                    {
                        "description": "docker skafos creation request",
                        "name": "createDockerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.CreateDockerRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/kubeadmControlplane/{name}": {
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Skafos"
                ],
                "summary": "patch vsphereSkafos",
                "operationId": "scale-controlplane",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "kubeadmControlplane name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/machineDeployment/{name}": {
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Skafos"
                ],
                "summary": "patch vsphereSkafos",
                "operationId": "scale-machine-deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "machine deployment name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/skafos/{name}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Skafos"
                ],
                "summary": "delete skafos",
                "operationId": "delete-skafos",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/skafos/{name}/kubeconfig": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "SkafosDetail"
                ],
                "summary": "get skafos kubeconfig",
                "operationId": "get-skafos-kubeconfig",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/skafos/{name}/metrics": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SkafosDetail"
                ],
                "summary": "get skafos metrics",
                "operationId": "get-skafos-metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.SkafosMetrics"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/skafos/{name}/stats": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SkafosDetail"
                ],
                "summary": "get skafos resource status",
                "operationId": "get-skafos-stats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ResourceOverview"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{namespace}/vsphereSkafos/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VsphereSkafos"
                ],
                "summary": "get skafos by name",
                "operationId": "get-skafos-by-name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.GetVsphereResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/configMaps": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ConfigMaps"
                ],
                "summary": "list skafos configMaps",
                "operationId": "list-skafos-configMaps",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.ConfigMapList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/deployments": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "list skafos deployments",
                "operationId": "list-skafos-deployments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.DeploymentList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/events": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "list skafos events",
                "operationId": "list-skafos-events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/k8s_io_api_core_v1.EventList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/ingresses": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingresses"
                ],
                "summary": "list skafos ingresses",
                "operationId": "list-skafos-ingresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.IngressList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/configMaps/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ConfigMaps"
                ],
                "summary": "get configMap",
                "operationId": "get-skafos-configMap",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.ConfigMap"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ConfigMaps"
                ],
                "summary": "delete skafos configMap",
                "operationId": "delete-skafos-configMap",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/deployments/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "get deployment",
                "operationId": "get-skafos-deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.DeploymentList"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "delete skafos deployment",
                "operationId": "delete-skafos-deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/ingresses/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingresses"
                ],
                "summary": "get ingress",
                "operationId": "get-skafos-ingress",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Ingress"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingresses"
                ],
                "summary": "delete skafos ingress",
                "operationId": "delete-skafos-ingress",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/nodes/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "get node",
                "operationId": "get-skafos-node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Node"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/persistentVolumeClaims/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersistentVolumeClaims"
                ],
                "summary": "get persistentVolumeClaim",
                "operationId": "get-skafos-persistentVolumeClaim",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.PersistentVolumeClaim"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersistentVolumeClaims"
                ],
                "summary": "delete skafos persistentVolumeClaim",
                "operationId": "delete-skafos-persistentVolumeClaim",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/persistentVolumes/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersistentVolumes"
                ],
                "summary": "get persistentVolume",
                "operationId": "get-skafos-persistentVolume",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.PersistentVolumeList"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersistentVolumes"
                ],
                "summary": "delete skafos persistentVolume",
                "operationId": "delete-skafos-persistentVolume",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/pods/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pods"
                ],
                "summary": "get pod",
                "operationId": "get-skafos-pod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Pod"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pods"
                ],
                "summary": "delete skafos pod",
                "operationId": "delete-skafos-pod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/replicaSets/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReplicaSets"
                ],
                "summary": "get replicaSet",
                "operationId": "get-skafos-replicaSet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.ReplicaSet"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReplicaSets"
                ],
                "summary": "delete skafos replicaSet",
                "operationId": "delete-skafos-replicaSet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/resources/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generic Resource"
                ],
                "summary": "get skafos resource from groupVersionResource",
                "operationId": "get-skafos-gvr",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource group",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "resource version",
                        "name": "version",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resource",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/unstructured.Unstructured"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generic Resource"
                ],
                "summary": "delete skafos resource from groupVersionResource",
                "operationId": "delete-skafos-gvr",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource group",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "resource version",
                        "name": "version",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resource",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/secrets/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "get secret",
                "operationId": "get-skafos-secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Secret"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "delete skafos secret",
                "operationId": "delete-skafos-secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/services/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "get service",
                "operationId": "get-skafos-service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Service"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "delete skafos service",
                "operationId": "delete-skafos-service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/statefulSet/{resourceName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StatefulSets"
                ],
                "summary": "get statefulSet",
                "operationId": "get-skafos-statefulSet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Pod"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/namespaces/{resourceNamespace}/statefulSets/{resourceName}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StatefulSets"
                ],
                "summary": "delete skafos statefulSet",
                "operationId": "delete-skafos-statefulSet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/nodes": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "list skafos nodes",
                "operationId": "list-skafos-nodes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.NodeList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/persistentVolumeClaims": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersistentVolumeClaims"
                ],
                "summary": "list skafos persistentVolumeClaims",
                "operationId": "list-skafos-persistentVolumeClaims",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/persistentVolumes": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersistentVolumes"
                ],
                "summary": "list skafos persistentVolumes",
                "operationId": "list-skafos-persistentVolumes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.PersistentVolumeList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/pods": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pods"
                ],
                "summary": "list skafos pods",
                "operationId": "list-skafos-pods",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.PodList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/releases": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Helm Release"
                ],
                "summary": "list skafos releases",
                "operationId": "list-skafos-releases",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ReleaseDto"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/replicaSets": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ReplicaSets"
                ],
                "summary": "list skafos replicaSets",
                "operationId": "list-skafos-replicaSets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.ReplicaSetList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/resources": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generic Resource"
                ],
                "summary": "list skafos resource from groupVersionResource",
                "operationId": "list-skafos-gvr",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource group",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "resource version",
                        "name": "version",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource name",
                        "name": "resource",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/unstructured.UnstructuredList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/secrets": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "list skafos secrets",
                "operationId": "list-skafos-secrets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.SecretList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/services": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "list skafos services",
                "operationId": "list-skafos-services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.ServiceList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/namespaces/{skafosNamespace}/skafos/{skafosName}/statefulSet": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StatefulSets"
                ],
                "summary": "list skafos statefulSets",
                "operationId": "list-skafos-statefulSets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "skafos namespace",
                        "name": "skafosNamespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "skafos name",
                        "name": "skafosName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource namespace",
                        "name": "resourceNamespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/unstructured.Unstructured"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/skafos/": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Skafos"
                ],
                "summary": "get all skafos",
                "operationId": "get-all-skafos",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.GetSkafosListResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/vsphereSkafos": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "VsphereSkafos"
                ],
                "summary": "create vsphereSkafos",
                "operationId": "create-vsphere-skafos",
                "parameters": [
                    {
                        "description": "vsphere skafos creation request",
                        "name": "createVsphereRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.CreateVsphereRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ProblemDetails"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.ClusterStatusError": {
            "type": "string",
            "enum": [
                "InvalidConfiguration",
                "UnsupportedChange",
                "CreateError",
                "UpdateError",
                "DeleteError"
            ],
            "x-enum-varnames": [
                "InvalidConfigurationClusterError",
                "UnsupportedChangeClusterError",
                "CreateClusterError",
                "UpdateClusterError",
                "DeleteClusterError"
            ]
        },
        "errors.KubeadmControlPlaneStatusError": {
            "type": "string",
            "enum": [
                "InvalidConfiguration",
                "UnsupportedChange",
                "CreateError",
                "UpdateError",
                "DeleteError"
            ],
            "x-enum-varnames": [
                "InvalidConfigurationKubeadmControlPlaneError",
                "UnsupportedChangeKubeadmControlPlaneError",
                "CreateKubeadmControlPlaneError",
                "UpdateKubeadmControlPlaneError",
                "DeleteKubeadmControlPlaneError"
            ]
        },
        "github_com_activadigital_plancia_internal_api_dtos.ClusterSpec": {
            "type": "object",
            "required": [
                "controlPlaneEndpointIp",
                "datacenter",
                "datastore",
                "datastoreUrl",
                "dhcp",
                "folder",
                "machineTemplate",
                "masterCpus",
                "masterDisk",
                "masterMem",
                "masterNodes",
                "nameserver1",
                "nameserver2",
                "network",
                "resourcePool",
                "server",
                "sshAuthorizedKey",
                "vCenterTlsThumbprint",
                "workerCpus",
                "workerDisk",
                "workerMem",
                "workerNodes"
            ],
            "properties": {
                "controlPlaneEndpointIp": {
                    "type": "string"
                },
                "datacenter": {
                    "type": "string"
                },
                "datastore": {
                    "type": "string"
                },
                "datastoreUrl": {
                    "type": "string"
                },
                "dhcp": {
                    "type": "boolean"
                },
                "folder": {
                    "type": "string"
                },
                "ipPool": {
                    "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.IpPool"
                },
                "machineTemplate": {
                    "type": "string"
                },
                "masterCpus": {
                    "type": "integer"
                },
                "masterDisk": {
                    "type": "integer"
                },
                "masterMem": {
                    "type": "integer"
                },
                "masterNodes": {
                    "type": "integer"
                },
                "nameserver1": {
                    "type": "string"
                },
                "nameserver2": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "resourcePool": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                },
                "sshAuthorizedKey": {
                    "type": "string"
                },
                "storagePolicy": {
                    "type": "string"
                },
                "vCenterTlsThumbprint": {
                    "type": "string"
                },
                "workerCpus": {
                    "type": "integer"
                },
                "workerDisk": {
                    "type": "integer"
                },
                "workerMem": {
                    "type": "integer"
                },
                "workerNodes": {
                    "type": "integer"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.ControlPlane": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "diskGb": {
                    "type": "integer"
                },
                "folder": {
                    "type": "string"
                },
                "kubernetesVersion": {
                    "type": "string"
                },
                "machineTemplate": {
                    "type": "string"
                },
                "memoryGb": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nodes": {
                    "type": "integer"
                },
                "resourcePool": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/v1beta1.KubeadmControlPlaneStatus"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.CreateDockerRequest": {
            "type": "object",
            "required": [
                "kubernetesVersion",
                "masterNodes",
                "name",
                "namespace",
                "workerNodes"
            ],
            "properties": {
                "kubernetesVersion": {
                    "type": "string"
                },
                "masterNodes": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 20
                },
                "namespace": {
                    "type": "string"
                },
                "workerNodes": {
                    "type": "integer"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.CreateVsphereRequest": {
            "type": "object",
            "required": [
                "credentials",
                "kubernetesVersion",
                "name",
                "namespace",
                "spec"
            ],
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.CredentialsDto"
                },
                "kubernetesVersion": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 20
                },
                "namespace": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ClusterSpec"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.CredentialsDto": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.GetSkafosListResponse": {
            "type": "object",
            "properties": {
                "creationTimestamp": {
                    "type": "string"
                },
                "kubernetesVersion": {
                    "type": "string"
                },
                "masterNodes": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/sigs_k8s_io_cluster-api_api_v1beta1.ClusterStatus"
                },
                "workerNodes": {
                    "type": "integer"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.GetVsphereResponse": {
            "type": "object",
            "properties": {
                "controlPlane": {
                    "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ControlPlane"
                },
                "machineDeployments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.MachineDeployment"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.IpPool": {
            "type": "object",
            "properties": {
                "networkEnd": {
                    "type": "string"
                },
                "networkGateway": {
                    "type": "string"
                },
                "networkStart": {
                    "type": "string"
                },
                "networkSubnet": {
                    "type": "string"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.MachineDeployment": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "diskGb": {
                    "type": "integer"
                },
                "folder": {
                    "type": "string"
                },
                "kubernetesVersion": {
                    "type": "string"
                },
                "machineTemplate": {
                    "type": "string"
                },
                "memoryGb": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nodes": {
                    "type": "integer"
                },
                "resourcePool": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/v1beta1.MachineDeploymentStatus"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.Metric": {
            "type": "object",
            "properties": {
                "allocatable": {
                    "type": "integer"
                },
                "capacity": {
                    "type": "integer"
                },
                "used": {
                    "type": "integer"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.PodStats": {
            "type": "object",
            "properties": {
                "failed": {
                    "type": "integer"
                },
                "pending": {
                    "type": "integer"
                },
                "running": {
                    "type": "integer"
                },
                "succeeded": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.ProblemDetails": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.ReleaseDto": {
            "type": "object",
            "properties": {
                "chart": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": true
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.ResourceOverview": {
            "type": "object",
            "properties": {
                "deployments": {
                    "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ResourceStats"
                },
                "pods": {
                    "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.PodStats"
                },
                "replicasets": {
                    "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ResourceStats"
                },
                "statefulsets": {
                    "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.ResourceStats"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.ResourceStats": {
            "type": "object",
            "properties": {
                "pending": {
                    "type": "integer"
                },
                "running": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "github_com_activadigital_plancia_internal_api_dtos.SkafosMetrics": {
            "type": "object",
            "properties": {
                "cpu": {
                    "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.Metric"
                },
                "memory": {
                    "$ref": "#/definitions/github_com_activadigital_plancia_internal_api_dtos.Metric"
                }
            }
        },
        "intstr.IntOrString": {
            "type": "object",
            "properties": {
                "intVal": {
                    "type": "integer"
                },
                "strVal": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/intstr.Type"
                }
            }
        },
        "intstr.Type": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-comments": {
                "Int": "The IntOrString holds an int.",
                "String": "The IntOrString holds a string."
            },
            "x-enum-varnames": [
                "Int",
                "String"
            ]
        },
        "k8s_io_api_core_v1.ConditionStatus": {
            "type": "string",
            "enum": [
                "True",
                "False",
                "Unknown"
            ],
            "x-enum-varnames": [
                "ConditionTrue",
                "ConditionFalse",
                "ConditionUnknown"
            ]
        },
        "k8s_io_api_core_v1.Event": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "What action was taken/failed regarding to the Regarding object.\n+optional",
                    "type": "string"
                },
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "count": {
                    "description": "The number of times this event has occurred.\n+optional",
                    "type": "integer"
                },
                "eventTime": {
                    "description": "Time when this Event was first observed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.MicroTime"
                        }
                    ]
                },
                "firstTimestamp": {
                    "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)\n+optional",
                    "type": "string"
                },
                "involvedObject": {
                    "description": "The object that this event is about.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectReference"
                        }
                    ]
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "lastTimestamp": {
                    "description": "The time at which the most recent occurrence of this event was recorded.\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "A human-readable description of the status of this operation.\nTODO: decide on maximum length.\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "reason": {
                    "description": "This should be a short, machine understandable string that gives the reason\nfor the transition into the object's current status.\nTODO: provide exact specification for format.\n+optional",
                    "type": "string"
                },
                "related": {
                    "description": "Optional secondary object for more complex actions.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectReference"
                        }
                    ]
                },
                "reportingComponent": {
                    "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.\n+optional",
                    "type": "string"
                },
                "reportingInstance": {
                    "description": "ID of the controller instance, e.g. `kubelet-xyzf`.\n+optional",
                    "type": "string"
                },
                "series": {
                    "description": "Data about the Event series this event represents or nil if it's a singleton Event.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.EventSeries"
                        }
                    ]
                },
                "source": {
                    "description": "The component reporting this event. Should be a short machine understandable string.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EventSource"
                        }
                    ]
                },
                "type": {
                    "description": "Type of this event (Normal, Warning), new types could be added in the future\n+optional",
                    "type": "string"
                }
            }
        },
        "k8s_io_api_core_v1.EventList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "List of events",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/k8s_io_api_core_v1.Event"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "k8s_io_api_core_v1.EventSeries": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of occurrences in this series up to the last heartbeat time",
                    "type": "integer"
                },
                "lastObservedTime": {
                    "description": "Time of the last occurrence observed",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.MicroTime"
                        }
                    ]
                }
            }
        },
        "k8s_io_apimachinery_pkg_apis_meta_v1.ConditionStatus": {
            "type": "string",
            "enum": [
                "True",
                "False",
                "Unknown"
            ],
            "x-enum-varnames": [
                "ConditionTrue",
                "ConditionFalse",
                "ConditionUnknown"
            ]
        },
        "resource.Quantity": {
            "type": "object",
            "properties": {
                "Format": {
                    "type": "string",
                    "enum": [
                        "DecimalExponent",
                        "BinarySI",
                        "DecimalSI"
                    ],
                    "x-enum-comments": {
                        "BinarySI": "e.g., 12Mi (12 * 2^20)",
                        "DecimalExponent": "e.g., 12e6",
                        "DecimalSI": "e.g., 12M  (12 * 10^6)"
                    },
                    "x-enum-varnames": [
                        "DecimalExponent",
                        "BinarySI",
                        "DecimalSI"
                    ]
                }
            }
        },
        "sigs_k8s_io_cluster-api_api_v1beta1.ClusterStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions defines current service state of the cluster.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.Condition"
                    }
                },
                "controlPlaneReady": {
                    "description": "ControlPlaneReady defines if the control plane is ready.\n+optional",
                    "type": "boolean"
                },
                "failureDomains": {
                    "description": "FailureDomains is a slice of failure domain objects synced from the infrastructure provider.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.FailureDomains"
                        }
                    ]
                },
                "failureMessage": {
                    "description": "FailureMessage indicates that there is a fatal problem reconciling the\nstate, and will be set to a descriptive error message.\n+optional",
                    "type": "string"
                },
                "failureReason": {
                    "description": "FailureReason indicates that there is a fatal problem reconciling the\nstate, and will be set to a token value suitable for\nprogrammatic interpretation.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/errors.ClusterStatusError"
                        }
                    ]
                },
                "infrastructureReady": {
                    "description": "InfrastructureReady is the state of the infrastructure provider.\n+optional",
                    "type": "boolean"
                },
                "observedGeneration": {
                    "description": "ObservedGeneration is the latest generation observed by the controller.\n+optional",
                    "type": "integer"
                },
                "phase": {
                    "description": "Phase represents the current phase of cluster actuation.\nE.g. Pending, Running, Terminating, Failed etc.\n+optional",
                    "type": "string"
                }
            }
        },
        "unstructured.Unstructured": {
            "type": "object",
            "properties": {
                "object": {
                    "description": "Object is a JSON compatible map with string, float, int, bool, []interface{}, or\nmap[string]interface{}\nchildren.",
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "unstructured.UnstructuredList": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "Items is a list of unstructured objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/unstructured.Unstructured"
                    }
                },
                "object": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "v1.AWSElasticBlockStoreVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "partition": {
                    "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n+optional",
                    "type": "integer"
                },
                "readOnly": {
                    "description": "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "string"
                }
            }
        },
        "v1.Affinity": {
            "type": "object",
            "properties": {
                "nodeAffinity": {
                    "description": "Describes node affinity scheduling rules for the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeAffinity"
                        }
                    ]
                },
                "podAffinity": {
                    "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAffinity"
                        }
                    ]
                },
                "podAntiAffinity": {
                    "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAntiAffinity"
                        }
                    ]
                }
            }
        },
        "v1.AppArmorProfile": {
            "type": "object",
            "properties": {
                "localhostProfile": {
                    "description": "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.\n+unionDiscriminator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AppArmorProfileType"
                        }
                    ]
                }
            }
        },
        "v1.AppArmorProfileType": {
            "type": "string",
            "enum": [
                "Unconfined",
                "RuntimeDefault",
                "Localhost"
            ],
            "x-enum-varnames": [
                "AppArmorProfileTypeUnconfined",
                "AppArmorProfileTypeRuntimeDefault",
                "AppArmorProfileTypeLocalhost"
            ]
        },
        "v1.AttachedVolume": {
            "type": "object",
            "properties": {
                "devicePath": {
                    "description": "DevicePath represents the device path where the volume should be available",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the attached volume",
                    "type": "string"
                }
            }
        },
        "v1.AzureDataDiskCachingMode": {
            "type": "string",
            "enum": [
                "None",
                "ReadOnly",
                "ReadWrite"
            ],
            "x-enum-varnames": [
                "AzureDataDiskCachingNone",
                "AzureDataDiskCachingReadOnly",
                "AzureDataDiskCachingReadWrite"
            ]
        },
        "v1.AzureDataDiskKind": {
            "type": "string",
            "enum": [
                "Shared",
                "Dedicated",
                "Managed"
            ],
            "x-enum-varnames": [
                "AzureSharedBlobDisk",
                "AzureDedicatedBlobDisk",
                "AzureManagedDisk"
            ]
        },
        "v1.AzureDiskVolumeSource": {
            "type": "object",
            "properties": {
                "cachingMode": {
                    "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureDataDiskCachingMode"
                        }
                    ]
                },
                "diskName": {
                    "description": "diskName is the Name of the data disk in the blob storage",
                    "type": "string"
                },
                "diskURI": {
                    "description": "diskURI is the URI of data disk in the blob storage",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureDataDiskKind"
                        }
                    ]
                },
                "readOnly": {
                    "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.AzureFilePersistentVolumeSource": {
            "type": "object",
            "properties": {
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "secretName is the name of secret that contains Azure Storage Account Name and Key",
                    "type": "string"
                },
                "secretNamespace": {
                    "description": "secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key\ndefault is the same as the Pod\n+optional",
                    "type": "string"
                },
                "shareName": {
                    "description": "shareName is the azure Share Name",
                    "type": "string"
                }
            }
        },
        "v1.AzureFileVolumeSource": {
            "type": "object",
            "properties": {
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
                    "type": "string"
                },
                "shareName": {
                    "description": "shareName is the azure share Name",
                    "type": "string"
                }
            }
        },
        "v1.CSIPersistentVolumeSource": {
            "type": "object",
            "properties": {
                "controllerExpandSecretRef": {
                    "description": "controllerExpandSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nControllerExpandVolume call.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                },
                "controllerPublishSecretRef": {
                    "description": "controllerPublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nControllerPublishVolume and ControllerUnpublishVolume calls.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                },
                "driver": {
                    "description": "driver is the name of the driver to use for this volume.\nRequired.",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType to mount. Must be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\n+optional",
                    "type": "string"
                },
                "nodeExpandSecretRef": {
                    "description": "nodeExpandSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodeExpandVolume call.\nThis field is optional, may be omitted if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                },
                "nodePublishSecretRef": {
                    "description": "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                },
                "nodeStageSecretRef": {
                    "description": "nodeStageSecretRef is a reference to the secret object containing sensitive\ninformation to pass to the CSI driver to complete the CSI NodeStageVolume\nand NodeStageVolume and NodeUnstageVolume calls.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                },
                "readOnly": {
                    "description": "readOnly value to pass to ControllerPublishVolumeRequest.\nDefaults to false (read/write).\n+optional",
                    "type": "boolean"
                },
                "volumeAttributes": {
                    "description": "volumeAttributes of the volume to publish.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "volumeHandle": {
                    "description": "volumeHandle is the unique volume name returned by the CSI volume\nplugin’s CreateVolume to refer to the volume on all subsequent calls.\nRequired.",
                    "type": "string"
                }
            }
        },
        "v1.CSIVolumeSource": {
            "type": "object",
            "properties": {
                "driver": {
                    "description": "driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.\n+optional",
                    "type": "string"
                },
                "nodePublishSecretRef": {
                    "description": "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "readOnly": {
                    "description": "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).\n+optional",
                    "type": "boolean"
                },
                "volumeAttributes": {
                    "description": "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.Capabilities": {
            "type": "object",
            "properties": {
                "add": {
                    "description": "Added capabilities\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "drop": {
                    "description": "Removed capabilities\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.CephFSPersistentVolumeSource": {
            "type": "object",
            "properties": {
                "monitors": {
                    "description": "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "boolean"
                },
                "secretFile": {
                    "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "string"
                },
                "secretRef": {
                    "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                },
                "user": {
                    "description": "user is Optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.CephFSVolumeSource": {
            "type": "object",
            "properties": {
                "monitors": {
                    "description": "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "boolean"
                },
                "secretFile": {
                    "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "string"
                },
                "secretRef": {
                    "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "user": {
                    "description": "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.CinderPersistentVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is Optional: points to a secret object containing parameters used to connect\nto OpenStack.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                },
                "volumeID": {
                    "description": "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string"
                }
            }
        },
        "v1.CinderVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "volumeID": {
                    "description": "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string"
                }
            }
        },
        "v1.ClaimResourceStatus": {
            "type": "string",
            "enum": [
                "ControllerResizeInProgress",
                "ControllerResizeFailed",
                "NodeResizePending",
                "NodeResizeInProgress",
                "NodeResizeFailed"
            ],
            "x-enum-varnames": [
                "PersistentVolumeClaimControllerResizeInProgress",
                "PersistentVolumeClaimControllerResizeFailed",
                "PersistentVolumeClaimNodeResizePending",
                "PersistentVolumeClaimNodeResizeInProgress",
                "PersistentVolumeClaimNodeResizeFailed"
            ]
        },
        "v1.ClaimSource": {
            "type": "object",
            "properties": {
                "resourceClaimName": {
                    "description": "ResourceClaimName is the name of a ResourceClaim object in the same\nnamespace as this pod.",
                    "type": "string"
                },
                "resourceClaimTemplateName": {
                    "description": "ResourceClaimTemplateName is the name of a ResourceClaimTemplate\nobject in the same namespace as this pod.\n\nThe template will be used to create a new ResourceClaim, which will\nbe bound to this pod. When this pod is deleted, the ResourceClaim\nwill also be deleted. The pod name and resource name, along with a\ngenerated component, will be used to form a unique name for the\nResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\nThis field is immutable and no changes will be made to the\ncorresponding ResourceClaim by the control plane after creating the\nResourceClaim.",
                    "type": "string"
                }
            }
        },
        "v1.ClientIPConfig": {
            "type": "object",
            "properties": {
                "timeoutSeconds": {
                    "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time.\nThe value must be \u003e0 \u0026\u0026 \u003c=86400(for 1 day) if ServiceAffinity == \"ClientIP\".\nDefault value is 10800(for 3 hours).\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.ClusterTrustBundleProjection": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as \"match nothing\".  If set but empty, interpreted as \"match\neverything\".\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "name": {
                    "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.\n+optional",
                    "type": "boolean"
                },
                "path": {
                    "description": "Relative path from the volume root to write the bundle.",
                    "type": "string"
                },
                "signerName": {
                    "description": "Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.Condition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Type=string\n+kubebuilder:validation:Format=date-time",
                    "type": "string"
                },
                "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:MaxLength=32768",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\n+optional\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                },
                "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:MaxLength=1024\n+kubebuilder:validation:MinLength=1\n+kubebuilder:validation:Pattern=`^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$`",
                    "type": "string"
                },
                "status": {
                    "description": "status of the condition, one of True, False, Unknown.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Enum=True;False;Unknown",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_apimachinery_pkg_apis_meta_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`\n+kubebuilder:validation:MaxLength=316",
                    "type": "string"
                }
            }
        },
        "v1.ConfigMap": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "binaryData": {
                    "description": "BinaryData contains the binary data.\nEach key must consist of alphanumeric characters, '-', '_' or '.'.\nBinaryData can contain byte sequences that are not in the UTF-8 range.\nThe keys stored in BinaryData must not overlap with the ones in\nthe Data field, this is enforced during validation process.\nUsing this field will require 1.10+ apiserver and\nkubelet.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "data": {
                    "description": "Data contains the configuration data.\nEach key must consist of alphanumeric characters, '-', '_' or '.'.\nValues with non-UTF-8 byte sequences must use the BinaryData field.\nThe keys stored in Data must not overlap with the keys in\nthe BinaryData field, this is enforced during validation process.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "immutable": {
                    "description": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot\nbe updated (only object metadata can be modified).\nIf not set to true, the field can be modified at any time.\nDefaulted to nil.\n+optional",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                }
            }
        },
        "v1.ConfigMapEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key to select.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of ConfigMaps.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ConfigMap"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "v1.ConfigMapNodeConfigSource": {
            "type": "object",
            "properties": {
                "kubeletConfigKey": {
                    "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure\nThis field is required in all cases.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the metadata.name of the referenced ConfigMap.\nThis field is required in all cases.",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace is the metadata.namespace of the referenced ConfigMap.\nThis field is required in all cases.",
                    "type": "string"
                },
                "resourceVersion": {
                    "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap.\nThis field is forbidden in Node.Spec, and required in Node.Status.\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the metadata.UID of the referenced ConfigMap.\nThis field is forbidden in Node.Spec, and required in Node.Status.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ConfigMapProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "optional specify whether the ConfigMap or its keys must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "optional specify whether the ConfigMap or its keys must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.Container": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.\n+optional",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Lifecycle"
                        }
                    ]
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.",
                    "type": "string"
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerPort"
                    }
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.\n+featureGate=InPlacePodVerticalScaling\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerResizePolicy"
                    }
                },
                "resources": {
                    "description": "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "restartPolicy": {
                    "description": "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.\n+featureGate=SidecarContainers\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerRestartPolicy"
                        }
                    ]
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecurityContext"
                        }
                    ]
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TerminationMessagePolicy"
                        }
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+listType=map\n+listMapKey=devicePath\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=map\n+listMapKey=mountPath",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeMount"
                    }
                },
                "workingDir": {
                    "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ContainerImage": {
            "type": "object",
            "properties": {
                "names": {
                    "description": "Names by which this image is known.\ne.g. [\"kubernetes.example/hyperkube:v1.0.7\", \"cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7\"]\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sizeBytes": {
                    "description": "The size of the image in bytes.\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.ContainerPort": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536.",
                    "type": "integer"
                },
                "hostIP": {
                    "description": "What host IP to bind the external port to.\n+optional",
                    "type": "string"
                },
                "hostPort": {
                    "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 \u003c x \u003c 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional",
                    "type": "integer"
                },
                "name": {
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional",
                    "type": "string"
                },
                "protocol": {
                    "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional\n+default=\"TCP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                }
            }
        },
        "v1.ContainerResizePolicy": {
            "type": "object",
            "properties": {
                "resourceName": {
                    "description": "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceName"
                        }
                    ]
                },
                "restartPolicy": {
                    "description": "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceResizeRestartPolicy"
                        }
                    ]
                }
            }
        },
        "v1.ContainerRestartPolicy": {
            "type": "string",
            "enum": [
                "Always"
            ],
            "x-enum-varnames": [
                "ContainerRestartPolicyAlways"
            ]
        },
        "v1.ContainerState": {
            "type": "object",
            "properties": {
                "running": {
                    "description": "Details about a running container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerStateRunning"
                        }
                    ]
                },
                "terminated": {
                    "description": "Details about a terminated container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerStateTerminated"
                        }
                    ]
                },
                "waiting": {
                    "description": "Details about a waiting container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerStateWaiting"
                        }
                    ]
                }
            }
        },
        "v1.ContainerStateRunning": {
            "type": "object",
            "properties": {
                "startedAt": {
                    "description": "Time at which the container was last (re-)started\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ContainerStateTerminated": {
            "type": "object",
            "properties": {
                "containerID": {
                    "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'\n+optional",
                    "type": "string"
                },
                "exitCode": {
                    "description": "Exit status from the last termination of the container",
                    "type": "integer"
                },
                "finishedAt": {
                    "description": "Time at which the container last terminated\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "Message regarding the last termination of the container\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason from the last termination of the container\n+optional",
                    "type": "string"
                },
                "signal": {
                    "description": "Signal from the last termination of the container\n+optional",
                    "type": "integer"
                },
                "startedAt": {
                    "description": "Time at which previous execution of the container started\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ContainerStateWaiting": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message regarding why the container is not yet running.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason the container is not yet running.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ContainerStatus": {
            "type": "object",
            "properties": {
                "allocatedResources": {
                    "description": "AllocatedResources represents the compute resources allocated for this container by the\nnode. Kubelet sets this value to Container.Resources.Requests upon successful pod admission\nand after successfully admitting desired pod resize.\n+featureGate=InPlacePodVerticalScaling\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "containerID": {
                    "description": "ContainerID is the ID of the container in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'.\nWhere type is a container runtime identifier, returned from Version call of CRI API\n(for example \"containerd\").\n+optional",
                    "type": "string"
                },
                "image": {
                    "description": "Image is the name of container image that the container is running.\nThe container image may not match the image used in the PodSpec,\nas it may have been resolved by the runtime.\nMore info: https://kubernetes.io/docs/concepts/containers/images.",
                    "type": "string"
                },
                "imageID": {
                    "description": "ImageID is the image ID of the container's image. The image ID may not\nmatch the image ID of the image used in the PodSpec, as it may have been\nresolved by the runtime.",
                    "type": "string"
                },
                "lastState": {
                    "description": "LastTerminationState holds the last termination state of the container to\nhelp debug container crashes and restarts. This field is not\npopulated if the container is still running and RestartCount is 0.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerState"
                        }
                    ]
                },
                "name": {
                    "description": "Name is a DNS_LABEL representing the unique name of the container.\nEach container in a pod must have a unique name across all container types.\nCannot be updated.",
                    "type": "string"
                },
                "ready": {
                    "description": "Ready specifies whether the container is currently passing its readiness check.\nThe value will change as readiness probes keep executing. If no readiness\nprobes are specified, this field defaults to true once the container is\nfully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to\naccept traffic.",
                    "type": "boolean"
                },
                "resources": {
                    "description": "Resources represents the compute resource requests and limits that have been successfully\nenacted on the running container after it has been started or has been successfully resized.\n+featureGate=InPlacePodVerticalScaling\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "restartCount": {
                    "description": "RestartCount holds the number of times the container has been restarted.\nKubelet makes an effort to always increment the value, but there\nare cases when the state may be lost due to node restarts and then the value\nmay be reset to 0. The value is never negative.",
                    "type": "integer"
                },
                "started": {
                    "description": "Started indicates whether the container has finished its postStart lifecycle hook\nand passed its startup probe.\nInitialized as false, becomes true after startupProbe is considered\nsuccessful. Resets to false when the container is restarted, or if kubelet\nloses state temporarily. In both cases, startup probes will run again.\nIs always true when no startupProbe is defined and container is running and\nhas passed the postStart lifecycle hook. The null value must be treated the\nsame as false.\n+optional",
                    "type": "boolean"
                },
                "state": {
                    "description": "State holds details about the container's current condition.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerState"
                        }
                    ]
                },
                "volumeMounts": {
                    "description": "Status of volume mounts.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=map\n+listMapKey=mountPath\n+featureGate=RecursiveReadOnlyMounts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeMountStatus"
                    }
                }
            }
        },
        "v1.DNSPolicy": {
            "type": "string",
            "enum": [
                "ClusterFirstWithHostNet",
                "ClusterFirst",
                "Default",
                "None"
            ],
            "x-enum-varnames": [
                "DNSClusterFirstWithHostNet",
                "DNSClusterFirst",
                "DNSDefault",
                "DNSNone"
            ]
        },
        "v1.DaemonEndpoint": {
            "type": "object",
            "properties": {
                "Port": {
                    "description": "Port number of the given endpoint.",
                    "type": "integer"
                }
            }
        },
        "v1.Deployment": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Specification of the desired behavior of the Deployment.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Most recently observed status of the Deployment.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentStatus"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "type": "string"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "type": "string"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of deployment condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentConditionType"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentConditionType": {
            "type": "string",
            "enum": [
                "Available",
                "Progressing",
                "ReplicaFailure"
            ],
            "x-enum-varnames": [
                "DeploymentAvailable",
                "DeploymentProgressing",
                "DeploymentReplicaFailure"
            ]
        },
        "v1.DeploymentList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of Deployments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Deployment"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentSpec": {
            "type": "object",
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready\nwithout any of its container crashing, for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)\n+optional",
                    "type": "integer"
                },
                "paused": {
                    "description": "Indicates that the deployment is paused.\n+optional",
                    "type": "boolean"
                },
                "progressDeadlineSeconds": {
                    "description": "The maximum time in seconds for a deployment to make progress before it\nis considered to be failed. The deployment controller will continue to\nprocess failed deployments and a condition with a ProgressDeadlineExceeded\nreason will be surfaced in the deployment status. Note that progress will\nnot be estimated during the time a deployment is paused. Defaults to 600s.",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Number of desired pods. This is a pointer to distinguish between explicit\nzero and not specified. Defaults to 1.\n+optional",
                    "type": "integer"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old ReplicaSets to retain to allow rollback.\nThis is a pointer to distinguish between explicit zero and not specified.\nDefaults to 10.\n+optional",
                    "type": "integer"
                },
                "selector": {
                    "description": "Label selector for pods. Existing ReplicaSets whose pods are\nselected by this will be the ones affected by this deployment.\nIt must match the pod template's labels.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.\n+optional\n+patchStrategy=retainKeys",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentStrategy"
                        }
                    ]
                },
                "template": {
                    "description": "Template describes the pods that will be created.\nThe only allowed template.spec.restartPolicy value is \"Always\".",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodTemplateSpec"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentStatus": {
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\n+optional",
                    "type": "integer"
                },
                "collisionCount": {
                    "description": "Count of hash collisions for the Deployment. The Deployment controller uses this\nfield as a collision avoidance mechanism when it needs to create the name for the\nnewest ReplicaSet.\n+optional",
                    "type": "integer"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a deployment's current state.\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DeploymentCondition"
                    }
                },
                "observedGeneration": {
                    "description": "The generation observed by the deployment controller.\n+optional",
                    "type": "integer"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.\n+optional",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).\n+optional",
                    "type": "integer"
                },
                "unavailableReplicas": {
                    "description": "Total number of unavailable pods targeted by this deployment. This is the total number of\npods that are still required for the deployment to have 100% available capacity. They may\neither be pods that are running but not yet available or pods that still have not been created.\n+optional",
                    "type": "integer"
                },
                "updatedReplicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.DeploymentStrategy": {
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if DeploymentStrategyType =\nRollingUpdate.\n---\nTODO: Update this to follow our convention for oneOf, whatever we decide it\nto be.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RollingUpdateDeployment"
                        }
                    ]
                },
                "type": {
                    "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentStrategyType"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentStrategyType": {
            "type": "string",
            "enum": [
                "Recreate",
                "RollingUpdate"
            ],
            "x-enum-varnames": [
                "RecreateDeploymentStrategyType",
                "RollingUpdateDeploymentStrategyType"
            ]
        },
        "v1.DownwardAPIProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "Items is a list of DownwardAPIVolume file\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
                    }
                }
            }
        },
        "v1.DownwardAPIVolumeFile": {
            "type": "object",
            "properties": {
                "fieldRef": {
                    "description": "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectFieldSelector"
                        }
                    ]
                },
                "mode": {
                    "description": "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                    "type": "string"
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceFieldSelector"
                        }
                    ]
                }
            }
        },
        "v1.DownwardAPIVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "items": {
                    "description": "Items is a list of downward API volume file\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
                    }
                }
            }
        },
        "v1.EmptyDirVolumeSource": {
            "type": "object",
            "properties": {
                "medium": {
                    "description": "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StorageMedium"
                        }
                    ]
                },
                "sizeLimit": {
                    "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resource.Quantity"
                        }
                    ]
                }
            }
        },
        "v1.EnvFromSource": {
            "type": "object",
            "properties": {
                "configMapRef": {
                    "description": "The ConfigMap to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapEnvSource"
                        }
                    ]
                },
                "prefix": {
                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n+optional",
                    "type": "string"
                },
                "secretRef": {
                    "description": "The Secret to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretEnvSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVar": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "value": {
                    "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EnvVarSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVarSource": {
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "Selects a key of a ConfigMap.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapKeySelector"
                        }
                    ]
                },
                "fieldRef": {
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectFieldSelector"
                        }
                    ]
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceFieldSelector"
                        }
                    ]
                },
                "secretKeyRef": {
                    "description": "Selects a key of a secret in the pod's namespace\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretKeySelector"
                        }
                    ]
                }
            }
        },
        "v1.EphemeralContainer": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint.\nThe image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell.\nThe image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "lifecycle": {
                    "description": "Lifecycle is not allowed for ephemeral containers.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Lifecycle"
                        }
                    ]
                },
                "livenessProbe": {
                    "description": "Probes are not allowed for ephemeral containers.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the ephemeral container specified as a DNS_LABEL.\nThis name must be unique among all containers, init containers and ephemeral containers.",
                    "type": "string"
                },
                "ports": {
                    "description": "Ports are not allowed for ephemeral containers.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerPort"
                    }
                },
                "readinessProbe": {
                    "description": "Probes are not allowed for ephemeral containers.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.\n+featureGate=InPlacePodVerticalScaling\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerResizePolicy"
                    }
                },
                "resources": {
                    "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources\nalready allocated to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "restartPolicy": {
                    "description": "Restart policy for the container to manage the restart behavior of each\ncontainer within a pod.\nThis may only be set for init containers. You cannot set this field on\nephemeral containers.\n+featureGate=SidecarContainers\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerRestartPolicy"
                        }
                    ]
                },
                "securityContext": {
                    "description": "Optional: SecurityContext defines the security options the ephemeral container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecurityContext"
                        }
                    ]
                },
                "startupProbe": {
                    "description": "Probes are not allowed for ephemeral containers.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
                    "type": "boolean"
                },
                "targetContainerName": {
                    "description": "If set, the name of the container from PodSpec that this ephemeral container targets.\nThe ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.\nIf not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not\nsupport namespace targeting then the result of setting this field is undefined.\n+optional",
                    "type": "string"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TerminationMessagePolicy"
                        }
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+listType=map\n+listMapKey=devicePath\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=map\n+listMapKey=mountPath",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeMount"
                    }
                },
                "workingDir": {
                    "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.EphemeralVolumeSource": {
            "type": "object",
            "properties": {
                "volumeClaimTemplate": {
                    "description": "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `\u003cpod name\u003e-\u003cvolume name\u003e` where\n`\u003cvolume name\u003e` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimTemplate"
                        }
                    ]
                }
            }
        },
        "v1.EventSource": {
            "type": "object",
            "properties": {
                "component": {
                    "description": "Component from which the event is generated.\n+optional",
                    "type": "string"
                },
                "host": {
                    "description": "Node name on which the event is generated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ExecAction": {
            "type": "object",
            "properties": {
                "command": {
                    "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.FCVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "lun": {
                    "description": "lun is Optional: FC target lun number\n+optional",
                    "type": "integer"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "targetWWNs": {
                    "description": "targetWWNs is Optional: FC target worldwide names (WWNs)\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wwids": {
                    "description": "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.FieldsV1": {
            "type": "object"
        },
        "v1.FlexPersistentVolumeSource": {
            "type": "object",
            "properties": {
                "driver": {
                    "description": "driver is the name of the driver to use for this volume.",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType is the Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n+optional",
                    "type": "string"
                },
                "options": {
                    "description": "options is Optional: this field holds extra command options if any.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is Optional: SecretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                }
            }
        },
        "v1.FlexVolumeSource": {
            "type": "object",
            "properties": {
                "driver": {
                    "description": "driver is the name of the driver to use for this volume.",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n+optional",
                    "type": "string"
                },
                "options": {
                    "description": "options is Optional: this field holds extra command options if any.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                }
            }
        },
        "v1.FlockerVolumeSource": {
            "type": "object",
            "properties": {
                "datasetName": {
                    "description": "datasetName is Name of the dataset stored as metadata -\u003e name on the dataset for Flocker\nshould be considered as deprecated\n+optional",
                    "type": "string"
                },
                "datasetUUID": {
                    "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.GCEPersistentDiskVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "partition": {
                    "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "type": "integer"
                },
                "pdName": {
                    "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.GRPCAction": {
            "type": "object",
            "properties": {
                "port": {
                    "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                    "type": "integer"
                },
                "service": {
                    "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.\n+optional\n+default=\"\"",
                    "type": "string"
                }
            }
        },
        "v1.GitRepoVolumeSource": {
            "type": "object",
            "properties": {
                "directory": {
                    "description": "directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.\n+optional",
                    "type": "string"
                },
                "repository": {
                    "description": "repository is the URL",
                    "type": "string"
                },
                "revision": {
                    "description": "revision is the commit hash for the specified revision.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.GlusterfsPersistentVolumeSource": {
            "type": "object",
            "properties": {
                "endpoints": {
                    "description": "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "endpointsNamespace": {
                    "description": "endpointsNamespace is the namespace that contains Glusterfs endpoint.\nIf this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n+optional",
                    "type": "string"
                },
                "path": {
                    "description": "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.GlusterfsVolumeSource": {
            "type": "object",
            "properties": {
                "endpoints": {
                    "description": "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "path": {
                    "description": "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.HTTPGetAction": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional",
                    "type": "string"
                },
                "httpHeaders": {
                    "description": "Custom headers to set in the request. HTTP allows repeated headers.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HTTPHeader"
                    }
                },
                "path": {
                    "description": "Path to access on the HTTP server.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                },
                "scheme": {
                    "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.URIScheme"
                        }
                    ]
                }
            }
        },
        "v1.HTTPHeader": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                    "type": "string"
                },
                "value": {
                    "description": "The header field value",
                    "type": "string"
                }
            }
        },
        "v1.HTTPIngressPath": {
            "type": "object",
            "properties": {
                "backend": {
                    "description": "backend defines the referenced service endpoint to which the traffic\nwill be forwarded to.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressBackend"
                        }
                    ]
                },
                "path": {
                    "description": "path is matched against the path of an incoming request. Currently it can\ncontain characters disallowed from the conventional \"path\" part of a URL\nas defined by RFC 3986. Paths must begin with a '/' and must be present\nwhen using PathType with value \"Exact\" or \"Prefix\".\n+optional",
                    "type": "string"
                },
                "pathType": {
                    "description": "pathType determines the interpretation of the path matching. PathType can\nbe one of the following values:\n* Exact: Matches the URL path exactly.\n* Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PathType"
                        }
                    ]
                }
            }
        },
        "v1.HTTPIngressRuleValue": {
            "type": "object",
            "properties": {
                "paths": {
                    "description": "paths is a collection of paths that map requests to backends.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HTTPIngressPath"
                    }
                }
            }
        },
        "v1.HostAlias": {
            "type": "object",
            "properties": {
                "hostnames": {
                    "description": "Hostnames for the above IP address.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ip": {
                    "description": "IP address of the host file entry.",
                    "type": "string"
                }
            }
        },
        "v1.HostIP": {
            "type": "object",
            "properties": {
                "ip": {
                    "description": "IP is the IP address assigned to the host",
                    "type": "string"
                }
            }
        },
        "v1.HostPathType": {
            "type": "string",
            "enum": [
                "",
                "DirectoryOrCreate",
                "Directory",
                "FileOrCreate",
                "File",
                "Socket",
                "CharDevice",
                "BlockDevice"
            ],
            "x-enum-varnames": [
                "HostPathUnset",
                "HostPathDirectoryOrCreate",
                "HostPathDirectory",
                "HostPathFileOrCreate",
                "HostPathFile",
                "HostPathSocket",
                "HostPathCharDev",
                "HostPathBlockDev"
            ]
        },
        "v1.HostPathVolumeSource": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "type": "string"
                },
                "type": {
                    "description": "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HostPathType"
                        }
                    ]
                }
            }
        },
        "v1.IPFamily": {
            "type": "string",
            "enum": [
                "IPv4",
                "IPv6",
                ""
            ],
            "x-enum-varnames": [
                "IPv4Protocol",
                "IPv6Protocol",
                "IPFamilyUnknown"
            ]
        },
        "v1.IPFamilyPolicy": {
            "type": "string",
            "enum": [
                "SingleStack",
                "PreferDualStack",
                "RequireDualStack"
            ],
            "x-enum-varnames": [
                "IPFamilyPolicySingleStack",
                "IPFamilyPolicyPreferDualStack",
                "IPFamilyPolicyRequireDualStack"
            ]
        },
        "v1.ISCSIPersistentVolumeSource": {
            "type": "object",
            "properties": {
                "chapAuthDiscovery": {
                    "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication\n+optional",
                    "type": "boolean"
                },
                "chapAuthSession": {
                    "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication\n+optional",
                    "type": "boolean"
                },
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "initiatorName": {
                    "description": "initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n\u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.\n+optional",
                    "type": "string"
                },
                "iqn": {
                    "description": "iqn is Target iSCSI Qualified Name.",
                    "type": "string"
                },
                "iscsiInterface": {
                    "description": "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).\n+optional",
                    "type": "string"
                },
                "lun": {
                    "description": "lun is iSCSI Target Lun number.",
                    "type": "integer"
                },
                "portals": {
                    "description": "portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                },
                "targetPortal": {
                    "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
                    "type": "string"
                }
            }
        },
        "v1.ISCSIVolumeSource": {
            "type": "object",
            "properties": {
                "chapAuthDiscovery": {
                    "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication\n+optional",
                    "type": "boolean"
                },
                "chapAuthSession": {
                    "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication\n+optional",
                    "type": "boolean"
                },
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "initiatorName": {
                    "description": "initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n\u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.\n+optional",
                    "type": "string"
                },
                "iqn": {
                    "description": "iqn is the target iSCSI Qualified Name.",
                    "type": "string"
                },
                "iscsiInterface": {
                    "description": "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).\n+optional",
                    "type": "string"
                },
                "lun": {
                    "description": "lun represents iSCSI Target Lun number.",
                    "type": "integer"
                },
                "portals": {
                    "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "targetPortal": {
                    "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
                    "type": "string"
                }
            }
        },
        "v1.Ingress": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "spec is the desired state of the Ingress.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressSpec"
                        }
                    ]
                },
                "status": {
                    "description": "status is the current state of the Ingress.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressStatus"
                        }
                    ]
                }
            }
        },
        "v1.IngressBackend": {
            "type": "object",
            "properties": {
                "resource": {
                    "description": "resource is an ObjectRef to another Kubernetes resource in the namespace\nof the Ingress object. If resource is specified, a service.Name and\nservice.Port must not be specified.\nThis is a mutually exclusive setting with \"Service\".\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TypedLocalObjectReference"
                        }
                    ]
                },
                "service": {
                    "description": "service references a service as a backend.\nThis is a mutually exclusive setting with \"Resource\".\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressServiceBackend"
                        }
                    ]
                }
            }
        },
        "v1.IngressList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of Ingress.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Ingress"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "v1.IngressLoadBalancerIngress": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "hostname is set for load-balancer ingress points that are DNS based.\n+optional",
                    "type": "string"
                },
                "ip": {
                    "description": "ip is set for load-balancer ingress points that are IP based.\n+optional",
                    "type": "string"
                },
                "ports": {
                    "description": "ports provides information about the ports exposed by this LoadBalancer.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IngressPortStatus"
                    }
                }
            }
        },
        "v1.IngressLoadBalancerStatus": {
            "type": "object",
            "properties": {
                "ingress": {
                    "description": "ingress is a list containing ingress points for the load-balancer.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IngressLoadBalancerIngress"
                    }
                }
            }
        },
        "v1.IngressPortStatus": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "error is to record the problem with the service port\nThe format of the error shall comply with the following rules:\n- built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+optional\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`\n+kubebuilder:validation:MaxLength=316",
                    "type": "string"
                },
                "port": {
                    "description": "port is the port number of the ingress port.",
                    "type": "integer"
                },
                "protocol": {
                    "description": "protocol is the protocol of the ingress port.\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                }
            }
        },
        "v1.IngressRule": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "host is the fully qualified domain name of a network host, as defined by RFC 3986.\nNote the following deviations from the \"host\" part of the\nURI as defined in RFC 3986:\n1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future.\nIncoming requests are matched against the host before the\nIngressRuleValue. If the host is unspecified, the Ingress routes all\ntraffic based on the specified IngressRuleValue.\n\nhost can be \"precise\" which is a domain name without the terminating dot of\na network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name\nprefixed with a single wildcard label (e.g. \"*.foo.com\").\nThe wildcard character '*' must appear by itself as the first DNS label and\nmatches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\").\nRequests will be matched against the Host field in the following way:\n1. If host is precise, the request matches this rule if the http host header is equal to Host.\n2. If host is a wildcard, then the request matches this rule if the http host header\nis to equal to the suffix (removing the first label) of the wildcard rule.\n+optional",
                    "type": "string"
                },
                "http": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPIngressRuleValue"
                        }
                    ]
                }
            }
        },
        "v1.IngressServiceBackend": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "name is the referenced service. The service must exist in\nthe same namespace as the Ingress object.",
                    "type": "string"
                },
                "port": {
                    "description": "port of the referenced service. A port name or port number\nis required for a IngressServiceBackend.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceBackendPort"
                        }
                    ]
                }
            }
        },
        "v1.IngressSpec": {
            "type": "object",
            "properties": {
                "defaultBackend": {
                    "description": "defaultBackend is the backend that should handle requests that don't\nmatch any rule. If Rules are not specified, DefaultBackend must be specified.\nIf DefaultBackend is not set, the handling of requests that do not match any\nof the rules will be up to the Ingress controller.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressBackend"
                        }
                    ]
                },
                "ingressClassName": {
                    "description": "ingressClassName is the name of an IngressClass cluster resource. Ingress\ncontroller implementations use this field to know whether they should be\nserving this Ingress resource, by a transitive connection\n(controller -\u003e IngressClass -\u003e Ingress resource). Although the\n`kubernetes.io/ingress.class` annotation (simple constant name) was never\nformally defined, it was widely supported by Ingress controllers to create\na direct binding between Ingress controller and Ingress resources. Newly\ncreated Ingress resources should prefer using the field. However, even\nthough the annotation is officially deprecated, for backwards compatibility\nreasons, ingress controllers should still honor that annotation if present.\n+optional",
                    "type": "string"
                },
                "rules": {
                    "description": "rules is a list of host rules used to configure the Ingress. If unspecified,\nor no rule matches, all traffic is sent to the default backend.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IngressRule"
                    }
                },
                "tls": {
                    "description": "tls represents the TLS configuration. Currently the Ingress only supports a\nsingle TLS port, 443. If multiple members of this list specify different hosts,\nthey will be multiplexed on the same port according to the hostname specified\nthrough the SNI TLS extension, if the ingress controller fulfilling the\ningress supports SNI.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IngressTLS"
                    }
                }
            }
        },
        "v1.IngressStatus": {
            "type": "object",
            "properties": {
                "loadBalancer": {
                    "description": "loadBalancer contains the current status of the load-balancer.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressLoadBalancerStatus"
                        }
                    ]
                }
            }
        },
        "v1.IngressTLS": {
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "hosts is a list of hosts included in the TLS certificate. The values in\nthis list must match the name/s used in the tlsSecret. Defaults to the\nwildcard host setting for the loadbalancer controller fulfilling this\nIngress, if left unspecified.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secretName": {
                    "description": "secretName is the name of the secret used to terminate TLS traffic on\nport 443. Field is left optional to allow TLS routing based on SNI\nhostname alone. If the SNI host in a listener conflicts with the \"Host\"\nheader field used by an IngressRule, the SNI host is used for termination\nand value of the \"Host\" header is used for routing.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.KeyToPath": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the key to project.",
                    "type": "string"
                },
                "mode": {
                    "description": "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
                    "type": "string"
                }
            }
        },
        "v1.LabelSelector": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LabelSelectorRequirement"
                    }
                },
                "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.LabelSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist"
            ],
            "x-enum-varnames": [
                "LabelSelectorOpIn",
                "LabelSelectorOpNotIn",
                "LabelSelectorOpExists",
                "LabelSelectorOpDoesNotExist"
            ]
        },
        "v1.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.Lifecycle": {
            "type": "object",
            "properties": {
                "postStart": {
                    "description": "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LifecycleHandler"
                        }
                    ]
                },
                "preStop": {
                    "description": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LifecycleHandler"
                        }
                    ]
                }
            }
        },
        "v1.LifecycleHandler": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ExecAction"
                        }
                    ]
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPGetAction"
                        }
                    ]
                },
                "sleep": {
                    "description": "Sleep represents the duration that the container should sleep before being terminated.\n+featureGate=PodLifecycleSleepAction\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SleepAction"
                        }
                    ]
                },
                "tcpSocket": {
                    "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TCPSocketAction"
                        }
                    ]
                }
            }
        },
        "v1.ListMeta": {
            "type": "object",
            "properties": {
                "continue": {
                    "description": "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage.",
                    "type": "string"
                },
                "remainingItemCount": {
                    "description": "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional",
                    "type": "integer"
                },
                "resourceVersion": {
                    "description": "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
                    "type": "string"
                },
                "selfLink": {
                    "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.LoadBalancerIPMode": {
            "type": "string",
            "enum": [
                "VIP",
                "Proxy"
            ],
            "x-enum-varnames": [
                "LoadBalancerIPModeVIP",
                "LoadBalancerIPModeProxy"
            ]
        },
        "v1.LoadBalancerIngress": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "Hostname is set for load-balancer ingress points that are DNS based\n(typically AWS load-balancers)\n+optional",
                    "type": "string"
                },
                "ip": {
                    "description": "IP is set for load-balancer ingress points that are IP based\n(typically GCE or OpenStack load-balancers)\n+optional",
                    "type": "string"
                },
                "ipMode": {
                    "description": "IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.\nSetting this to \"VIP\" indicates that traffic is delivered to the node with\nthe destination set to the load-balancer's IP and port.\nSetting this to \"Proxy\" indicates that traffic is delivered to the node or pod with\nthe destination set to the node's IP and node port or the pod's IP and port.\nService implementations may use this information to adjust traffic routing.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LoadBalancerIPMode"
                        }
                    ]
                },
                "ports": {
                    "description": "Ports is a list of records of service ports\nIf used, every port defined in the service should have an entry in it\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PortStatus"
                    }
                }
            }
        },
        "v1.LoadBalancerStatus": {
            "type": "object",
            "properties": {
                "ingress": {
                    "description": "Ingress is a list containing ingress points for the load-balancer.\nTraffic intended for the service should be sent to these ingress points.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LoadBalancerIngress"
                    }
                }
            }
        },
        "v1.LocalObjectReference": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.LocalVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nIt applies only when the Path is a block device.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a filesystem if unspecified.\n+optional",
                    "type": "string"
                },
                "path": {
                    "description": "path of the full path to the volume on the node.\nIt can be either a directory or block device (disk, partition, ...).",
                    "type": "string"
                }
            }
        },
        "v1.ManagedFieldsEntry": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted.",
                    "type": "string"
                },
                "fieldsType": {
                    "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\"",
                    "type": "string"
                },
                "fieldsV1": {
                    "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FieldsV1"
                        }
                    ]
                },
                "manager": {
                    "description": "Manager is an identifier of the workflow managing these fields.",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ManagedFieldsOperationType"
                        }
                    ]
                },
                "subresource": {
                    "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource.",
                    "type": "string"
                },
                "time": {
                    "description": "Time is the timestamp of when the ManagedFields entry was added. The\ntimestamp will also be updated if a field is added, the manager\nchanges any of the owned fields value or removes a field. The\ntimestamp does not update when a field is removed from the entry\nbecause another manager took it over.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ManagedFieldsOperationType": {
            "type": "string",
            "enum": [
                "Apply",
                "Update"
            ],
            "x-enum-varnames": [
                "ManagedFieldsOperationApply",
                "ManagedFieldsOperationUpdate"
            ]
        },
        "v1.MicroTime": {
            "type": "object",
            "properties": {
                "time.Time": {
                    "type": "string"
                }
            }
        },
        "v1.ModifyVolumeStatus": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "status is the status of the ControllerModifyVolume operation. It can be in any of following states:\n - Pending\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\n   the specified VolumeAttributesClass not existing.\n - InProgress\n   InProgress indicates that the volume is being modified.\n - Infeasible\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\n\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimModifyVolumeStatus"
                        }
                    ]
                },
                "targetVolumeAttributesClassName": {
                    "description": "targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled",
                    "type": "string"
                }
            }
        },
        "v1.MountPropagationMode": {
            "type": "string",
            "enum": [
                "None",
                "HostToContainer",
                "Bidirectional"
            ],
            "x-enum-varnames": [
                "MountPropagationNone",
                "MountPropagationHostToContainer",
                "MountPropagationBidirectional"
            ]
        },
        "v1.NFSVolumeSource": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
                    "type": "boolean"
                },
                "server": {
                    "description": "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string"
                }
            }
        },
        "v1.Node": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Spec defines the behavior of a node.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Most recently observed status of the node.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeStatus"
                        }
                    ]
                }
            }
        },
        "v1.NodeAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The node address.",
                    "type": "string"
                },
                "type": {
                    "description": "Node address type, one of Hostname, ExternalIP or InternalIP.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeAddressType"
                        }
                    ]
                }
            }
        },
        "v1.NodeAddressType": {
            "type": "string",
            "enum": [
                "Hostname",
                "InternalIP",
                "ExternalIP",
                "InternalDNS",
                "ExternalDNS"
            ],
            "x-enum-varnames": [
                "NodeHostName",
                "NodeInternalIP",
                "NodeExternalIP",
                "NodeInternalDNS",
                "NodeExternalDNS"
            ]
        },
        "v1.NodeAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PreferredSchedulingTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelector"
                        }
                    ]
                }
            }
        },
        "v1.NodeCondition": {
            "type": "object",
            "properties": {
                "lastHeartbeatTime": {
                    "description": "Last time we got an update on a given condition.\n+optional",
                    "type": "string"
                },
                "lastTransitionTime": {
                    "description": "Last time the condition transit from one status to another.\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "Human readable message indicating details about last transition.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason for the condition's last transition.\n+optional",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of node condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConditionType"
                        }
                    ]
                }
            }
        },
        "v1.NodeConditionType": {
            "type": "string",
            "enum": [
                "Ready",
                "MemoryPressure",
                "DiskPressure",
                "PIDPressure",
                "NetworkUnavailable"
            ],
            "x-enum-varnames": [
                "NodeReady",
                "NodeMemoryPressure",
                "NodeDiskPressure",
                "NodePIDPressure",
                "NodeNetworkUnavailable"
            ]
        },
        "v1.NodeConfigSource": {
            "type": "object",
            "properties": {
                "configMap": {
                    "description": "ConfigMap is a reference to a Node's ConfigMap",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapNodeConfigSource"
                        }
                    ]
                }
            }
        },
        "v1.NodeConfigStatus": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active reports the checkpointed config the node is actively using.\nActive will represent either the current version of the Assigned config,\nor the current LastKnownGood config, depending on whether attempting to use the\nAssigned config results in an error.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConfigSource"
                        }
                    ]
                },
                "assigned": {
                    "description": "Assigned reports the checkpointed config the node will try to use.\nWhen Node.Spec.ConfigSource is updated, the node checkpoints the associated\nconfig payload to local disk, along with a record indicating intended\nconfig. The node refers to this record to choose its config checkpoint, and\nreports this record in Assigned. Assigned only updates in the status after\nthe record has been checkpointed to disk. When the Kubelet is restarted,\nit tries to make the Assigned config the Active config by loading and\nvalidating the checkpointed payload identified by Assigned.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConfigSource"
                        }
                    ]
                },
                "error": {
                    "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config.\nErrors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned\nrecord, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting\nto load or validate the Assigned config, etc.\nErrors may occur at different points while syncing config. Earlier errors (e.g. download or\ncheckpointing errors) will not result in a rollback to LastKnownGood, and may resolve across\nKubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in\na rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error\nby fixing the config assigned in Spec.ConfigSource.\nYou can find additional information for debugging by searching the error message in the Kubelet log.\nError is a human-readable description of the error state; machines can check whether or not Error\nis empty, but should not rely on the stability of the Error text across Kubelet versions.\n+optional",
                    "type": "string"
                },
                "lastKnownGood": {
                    "description": "LastKnownGood reports the checkpointed config the node will fall back to\nwhen it encounters an error attempting to use the Assigned config.\nThe Assigned config becomes the LastKnownGood config when the node determines\nthat the Assigned config is stable and correct.\nThis is currently implemented as a 10-minute soak period starting when the local\nrecord of Assigned config is updated. If the Assigned config is Active at the end\nof this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is\nreset to nil (use local defaults), the LastKnownGood is also immediately reset to nil,\nbecause the local default config is always assumed good.\nYou should not make assumptions about the node's method of determining config stability\nand correctness, as this may change or become configurable in the future.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConfigSource"
                        }
                    ]
                }
            }
        },
        "v1.NodeDaemonEndpoints": {
            "type": "object",
            "properties": {
                "kubeletEndpoint": {
                    "description": "Endpoint on which Kubelet is listening.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DaemonEndpoint"
                        }
                    ]
                }
            }
        },
        "v1.NodeInclusionPolicy": {
            "type": "string",
            "enum": [
                "Ignore",
                "Honor"
            ],
            "x-enum-varnames": [
                "NodeInclusionPolicyIgnore",
                "NodeInclusionPolicyHonor"
            ]
        },
        "v1.NodeList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "List of nodes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Node"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "v1.NodePhase": {
            "type": "string",
            "enum": [
                "Pending",
                "Running",
                "Terminated"
            ],
            "x-enum-varnames": [
                "NodePending",
                "NodeRunning",
                "NodeTerminated"
            ]
        },
        "v1.NodeRuntimeHandler": {
            "type": "object",
            "properties": {
                "features": {
                    "description": "Supported features.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeRuntimeHandlerFeatures"
                        }
                    ]
                },
                "name": {
                    "description": "Runtime handler name.\nEmpty for the default runtime handler.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.NodeRuntimeHandlerFeatures": {
            "type": "object",
            "properties": {
                "recursiveReadOnlyMounts": {
                    "description": "RecursiveReadOnlyMounts is set to true if the runtime handler supports RecursiveReadOnlyMounts.\n+featureGate=RecursiveReadOnlyMounts\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.NodeSelector": {
            "type": "object",
            "properties": {
                "nodeSelectorTerms": {
                    "description": "Required. A list of node selector terms. The terms are ORed.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorTerm"
                    }
                }
            }
        },
        "v1.NodeSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist",
                "Gt",
                "Lt"
            ],
            "x-enum-varnames": [
                "NodeSelectorOpIn",
                "NodeSelectorOpNotIn",
                "NodeSelectorOpExists",
                "NodeSelectorOpDoesNotExist",
                "NodeSelectorOpGt",
                "NodeSelectorOpLt"
            ]
        },
        "v1.NodeSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.NodeSelectorTerm": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                },
                "matchFields": {
                    "description": "A list of node selector requirements by node's fields.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                }
            }
        },
        "v1.NodeSpec": {
            "type": "object",
            "properties": {
                "configSource": {
                    "description": "Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConfigSource"
                        }
                    ]
                },
                "externalID": {
                    "description": "Deprecated. Not all kubelets will set this field. Remove field after 1.13.\nsee: https://issues.k8s.io/61966\n+optional",
                    "type": "string"
                },
                "podCIDR": {
                    "description": "PodCIDR represents the pod IP range assigned to the node.\n+optional",
                    "type": "string"
                },
                "podCIDRs": {
                    "description": "podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this\nfield is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for\neach of IPv4 and IPv6.\n+optional\n+patchStrategy=merge\n+listType=set",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "providerID": {
                    "description": "ID of the node assigned by the cloud provider in the format: \u003cProviderName\u003e://\u003cProviderSpecificNodeID\u003e\n+optional",
                    "type": "string"
                },
                "taints": {
                    "description": "If specified, the node's taints.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Taint"
                    }
                },
                "unschedulable": {
                    "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.NodeStatus": {
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "List of addresses reachable to the node.\nQueried from cloud provider, if available.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#addresses\nNote: This field is declared as mergeable, but the merge key is not sufficiently\nunique, which can cause data corruption when it is merged. Callers should instead\nuse a full-replacement patch. See https://pr.k8s.io/79391 for an example.\nConsumers should assume that addresses can change during the\nlifetime of a Node. However, there are some exceptions where this may not\nbe possible, such as Pods that inherit a Node's address in its own status or\nconsumers of the downward API (status.hostIP).\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeAddress"
                    }
                },
                "allocatable": {
                    "description": "Allocatable represents the resources of a node that are available for scheduling.\nDefaults to Capacity.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "capacity": {
                    "description": "Capacity represents the total resources of a node.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "conditions": {
                    "description": "Conditions is an array of current observed node conditions.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#condition\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeCondition"
                    }
                },
                "config": {
                    "description": "Status of the config assigned to the node via the dynamic Kubelet config feature.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConfigStatus"
                        }
                    ]
                },
                "daemonEndpoints": {
                    "description": "Endpoints of daemons running on the Node.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeDaemonEndpoints"
                        }
                    ]
                },
                "images": {
                    "description": "List of container images on this node\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerImage"
                    }
                },
                "nodeInfo": {
                    "description": "Set of ids/uuids to uniquely identify the node.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#info\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSystemInfo"
                        }
                    ]
                },
                "phase": {
                    "description": "NodePhase is the recently observed lifecycle phase of the node.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#phase\nThe field is never populated, and now is deprecated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodePhase"
                        }
                    ]
                },
                "runtimeHandlers": {
                    "description": "The available runtime handlers.\n+featureGate=RecursiveReadOnlyMounts\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeRuntimeHandler"
                    }
                },
                "volumesAttached": {
                    "description": "List of volumes that are attached to the node.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.AttachedVolume"
                    }
                },
                "volumesInUse": {
                    "description": "List of attachable volumes in use (mounted) by the node.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.NodeSystemInfo": {
            "type": "object",
            "properties": {
                "architecture": {
                    "description": "The Architecture reported by the node",
                    "type": "string"
                },
                "bootID": {
                    "description": "Boot ID reported by the node.",
                    "type": "string"
                },
                "containerRuntimeVersion": {
                    "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).",
                    "type": "string"
                },
                "kernelVersion": {
                    "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
                    "type": "string"
                },
                "kubeProxyVersion": {
                    "description": "KubeProxy Version reported by the node.",
                    "type": "string"
                },
                "kubeletVersion": {
                    "description": "Kubelet Version reported by the node.",
                    "type": "string"
                },
                "machineID": {
                    "description": "MachineID reported by the node. For unique machine identification\nin the cluster this field is preferred. Learn more from man(5)\nmachine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html",
                    "type": "string"
                },
                "operatingSystem": {
                    "description": "The Operating System reported by the node",
                    "type": "string"
                },
                "osImage": {
                    "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
                    "type": "string"
                },
                "systemUUID": {
                    "description": "SystemUUID reported by the node. For unique machine identification\nMachineID is preferred. This field is specific to Red Hat hosts\nhttps://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid",
                    "type": "string"
                }
            }
        },
        "v1.OSName": {
            "type": "string",
            "enum": [
                "linux",
                "windows"
            ],
            "x-enum-varnames": [
                "Linux",
                "Windows"
            ]
        },
        "v1.ObjectFieldSelector": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                }
            }
        },
        "v1.ObjectMeta": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "deletionGracePeriodSeconds": {
                    "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
                    "type": "integer"
                },
                "deletionTimestamp": {
                    "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "finalizers": {
                    "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge\n+listType=set",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generateName": {
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
                    "type": "string"
                },
                "generation": {
                    "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
                    "type": "integer"
                },
                "labels": {
                    "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "managedFields": {
                    "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ManagedFieldsEntry"
                    }
                },
                "name": {
                    "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional",
                    "type": "string"
                },
                "ownerReferences": {
                    "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge\n+listType=map\n+listMapKey=uid",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.OwnerReference"
                    }
                },
                "resourceVersion": {
                    "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
                    "type": "string"
                },
                "selfLink": {
                    "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ObjectReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.\n+optional",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional",
                    "type": "string"
                },
                "resourceVersion": {
                    "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.OwnerReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
                    "type": "boolean"
                },
                "controller": {
                    "description": "If true, this reference points to the managing controller.\n+optional",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                    "type": "string"
                }
            }
        },
        "v1.PathType": {
            "type": "string",
            "enum": [
                "Exact",
                "Prefix",
                "ImplementationSpecific"
            ],
            "x-enum-varnames": [
                "PathTypeExact",
                "PathTypePrefix",
                "PathTypeImplementationSpecific"
            ]
        },
        "v1.PersistentVolume": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "spec defines a specification of a persistent volume owned by the cluster.\nProvisioned by an administrator.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeSpec"
                        }
                    ]
                },
                "status": {
                    "description": "status represents the current information/status for the persistent volume.\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeStatus"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeAccessMode": {
            "type": "string",
            "enum": [
                "ReadWriteOnce",
                "ReadOnlyMany",
                "ReadWriteMany",
                "ReadWriteOncePod"
            ],
            "x-enum-varnames": [
                "ReadWriteOnce",
                "ReadOnlyMany",
                "ReadWriteMany",
                "ReadWriteOncePod"
            ]
        },
        "v1.PersistentVolumeClaim": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "spec defines the desired characteristics of a volume requested by a pod author.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
                        }
                    ]
                },
                "status": {
                    "description": "status represents the current information/status of a persistent volume claim.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimStatus"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeClaimCondition": {
            "type": "object",
            "properties": {
                "lastProbeTime": {
                    "description": "lastProbeTime is the time we probed the condition.\n+optional",
                    "type": "string"
                },
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the time the condition transitioned from one status to another.\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "message is the human-readable message indicating details about last transition.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "reason is a unique, this should be a short, machine understandable string that gives the reason\nfor condition's last transition. If it reports \"Resizing\" that means the underlying\npersistent volume is being resized.\n+optional",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                },
                "type": {
                    "$ref": "#/definitions/v1.PersistentVolumeClaimConditionType"
                }
            }
        },
        "v1.PersistentVolumeClaimConditionType": {
            "type": "string",
            "enum": [
                "Resizing",
                "FileSystemResizePending",
                "ModifyVolumeError",
                "ModifyingVolume"
            ],
            "x-enum-varnames": [
                "PersistentVolumeClaimResizing",
                "PersistentVolumeClaimFileSystemResizePending",
                "PersistentVolumeClaimVolumeModifyVolumeError",
                "PersistentVolumeClaimVolumeModifyingVolume"
            ]
        },
        "v1.PersistentVolumeClaimList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "items is a list of persistent volume claims.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolumeClaim"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeClaimModifyVolumeStatus": {
            "type": "string",
            "enum": [
                "Pending",
                "InProgress",
                "Infeasible"
            ],
            "x-enum-varnames": [
                "PersistentVolumeClaimModifyVolumePending",
                "PersistentVolumeClaimModifyVolumeInProgress",
                "PersistentVolumeClaimModifyVolumeInfeasible"
            ]
        },
        "v1.PersistentVolumeClaimPhase": {
            "type": "string",
            "enum": [
                "Pending",
                "Bound",
                "Lost"
            ],
            "x-enum-varnames": [
                "ClaimPending",
                "ClaimBound",
                "ClaimLost"
            ]
        },
        "v1.PersistentVolumeClaimSpec": {
            "type": "object",
            "properties": {
                "accessModes": {
                    "description": "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
                    }
                },
                "dataSource": {
                    "description": "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TypedLocalObjectReference"
                        }
                    ]
                },
                "dataSourceRef": {
                    "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TypedObjectReference"
                        }
                    ]
                },
                "resources": {
                    "description": "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.VolumeResourceRequirements"
                        }
                    ]
                },
                "selector": {
                    "description": "selector is a label query over volumes to consider for binding.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "storageClassName": {
                    "description": "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n+optional",
                    "type": "string"
                },
                "volumeAttributesClassName": {
                    "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.\n+featureGate=VolumeAttributesClass\n+optional",
                    "type": "string"
                },
                "volumeMode": {
                    "description": "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeMode"
                        }
                    ]
                },
                "volumeName": {
                    "description": "volumeName is the binding reference to the PersistentVolume backing this claim.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.PersistentVolumeClaimStatus": {
            "type": "object",
            "properties": {
                "accessModes": {
                    "description": "accessModes contains the actual access modes the volume backing the PVC has.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
                    }
                },
                "allocatedResourceStatuses": {
                    "description": "allocatedResourceStatuses stores status of resource being resized for the given PVC.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nClaimResourceStatus can be in any of following states:\n\t- ControllerResizeInProgress:\n\t\tState set when resize controller starts resizing the volume in control-plane.\n\t- ControllerResizeFailed:\n\t\tState set when resize has failed in resize controller with a terminal error.\n\t- NodeResizePending:\n\t\tState set when resize controller has finished resizing the volume but further resizing of\n\t\tvolume is needed on the node.\n\t- NodeResizeInProgress:\n\t\tState set when kubelet starts resizing the volume.\n\t- NodeResizeFailed:\n\t\tState set when resizing has failed in kubelet with a terminal error. Transient errors don't set\n\t\tNodeResizeFailed.\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\n\t- pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\"\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.\n+featureGate=RecoverVolumeExpansionFailure\n+mapType=granular\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/v1.ClaimResourceStatus"
                    }
                },
                "allocatedResources": {
                    "description": "allocatedResources tracks the resources allocated to a PVC including its capacity.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation\nis requested.\nFor storage quota, the larger value from allocatedResources and PVC.spec.resources is used.\nIf allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.\nIf a volume expansion capacity request is lowered, allocatedResources is only\nlowered if there are no expansion operations in progress and if the actual volume capacity\nis equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown resourceName\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.\n+featureGate=RecoverVolumeExpansionFailure\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "capacity": {
                    "description": "capacity represents the actual resources of the underlying volume.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "conditions": {
                    "description": "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being\nresized then the Condition will be set to 'Resizing'.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolumeClaimCondition"
                    }
                },
                "currentVolumeAttributesClassName": {
                    "description": "currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.\nWhen unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim\nThis is an alpha field and requires enabling VolumeAttributesClass feature.\n+featureGate=VolumeAttributesClass\n+optional",
                    "type": "string"
                },
                "modifyVolumeStatus": {
                    "description": "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.\nWhen this is unset, there is no ModifyVolume operation being attempted.\nThis is an alpha field and requires enabling VolumeAttributesClass feature.\n+featureGate=VolumeAttributesClass\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ModifyVolumeStatus"
                        }
                    ]
                },
                "phase": {
                    "description": "phase represents the current phase of PersistentVolumeClaim.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimPhase"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeClaimTemplate": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "May contain labels and annotations that will be copied into the PVC\nwhen creating it. No other fields are allowed and will be rejected during\nvalidation.\n\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeClaimVolumeSource": {
            "type": "object",
            "properties": {
                "claimName": {
                    "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.PersistentVolumeList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "items is a list of persistent volumes.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolume"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeMode": {
            "type": "string",
            "enum": [
                "Block",
                "Filesystem"
            ],
            "x-enum-varnames": [
                "PersistentVolumeBlock",
                "PersistentVolumeFilesystem"
            ]
        },
        "v1.PersistentVolumePhase": {
            "type": "string",
            "enum": [
                "Pending",
                "Available",
                "Bound",
                "Released",
                "Failed"
            ],
            "x-enum-varnames": [
                "VolumePending",
                "VolumeAvailable",
                "VolumeBound",
                "VolumeReleased",
                "VolumeFailed"
            ]
        },
        "v1.PersistentVolumeReclaimPolicy": {
            "type": "string",
            "enum": [
                "Recycle",
                "Delete",
                "Retain"
            ],
            "x-enum-varnames": [
                "PersistentVolumeReclaimRecycle",
                "PersistentVolumeReclaimDelete",
                "PersistentVolumeReclaimRetain"
            ]
        },
        "v1.PersistentVolumeSpec": {
            "type": "object",
            "properties": {
                "accessModes": {
                    "description": "accessModes contains all ways the volume can be mounted.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
                    }
                },
                "awsElasticBlockStore": {
                    "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AWSElasticBlockStoreVolumeSource"
                        }
                    ]
                },
                "azureDisk": {
                    "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureDiskVolumeSource"
                        }
                    ]
                },
                "azureFile": {
                    "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureFilePersistentVolumeSource"
                        }
                    ]
                },
                "capacity": {
                    "description": "capacity is the description of the persistent volume's resources and capacity.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "cephfs": {
                    "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CephFSPersistentVolumeSource"
                        }
                    ]
                },
                "cinder": {
                    "description": "cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CinderPersistentVolumeSource"
                        }
                    ]
                },
                "claimRef": {
                    "description": "claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim.\nExpected to be non-nil when bound.\nclaim.VolumeName is the authoritative bind between PV and PVC.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding\n+optional\n+structType=granular",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectReference"
                        }
                    ]
                },
                "csi": {
                    "description": "csi represents storage that is handled by an external CSI driver (Beta feature).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CSIPersistentVolumeSource"
                        }
                    ]
                },
                "fc": {
                    "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FCVolumeSource"
                        }
                    ]
                },
                "flexVolume": {
                    "description": "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FlexPersistentVolumeSource"
                        }
                    ]
                },
                "flocker": {
                    "description": "flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FlockerVolumeSource"
                        }
                    ]
                },
                "gcePersistentDisk": {
                    "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod. Provisioned by an admin.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GCEPersistentDiskVolumeSource"
                        }
                    ]
                },
                "glusterfs": {
                    "description": "glusterfs represents a Glusterfs volume that is attached to a host and\nexposed to the pod. Provisioned by an admin.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GlusterfsPersistentVolumeSource"
                        }
                    ]
                },
                "hostPath": {
                    "description": "hostPath represents a directory on the host.\nProvisioned by a developer or tester.\nThis is useful for single-node development and testing only!\nOn-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HostPathVolumeSource"
                        }
                    ]
                },
                "iscsi": {
                    "description": "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod. Provisioned by an admin.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ISCSIPersistentVolumeSource"
                        }
                    ]
                },
                "local": {
                    "description": "local represents directly-attached storage with node affinity\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalVolumeSource"
                        }
                    ]
                },
                "mountOptions": {
                    "description": "mountOptions is the list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will\nsimply fail if one is invalid.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "nfs": {
                    "description": "nfs represents an NFS mount on the host. Provisioned by an admin.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NFSVolumeSource"
                        }
                    ]
                },
                "nodeAffinity": {
                    "description": "nodeAffinity defines constraints that limit what nodes this volume can be accessed from.\nThis field influences the scheduling of pods that use this volume.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.VolumeNodeAffinity"
                        }
                    ]
                },
                "persistentVolumeReclaimPolicy": {
                    "description": "persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim.\nValid options are Retain (default for manually created PersistentVolumes), Delete (default\nfor dynamically provisioned PersistentVolumes), and Recycle (deprecated).\nRecycle must be supported by the volume plugin underlying this PersistentVolume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeReclaimPolicy"
                        }
                    ]
                },
                "photonPersistentDisk": {
                    "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PhotonPersistentDiskVolumeSource"
                        }
                    ]
                },
                "portworxVolume": {
                    "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PortworxVolumeSource"
                        }
                    ]
                },
                "quobyte": {
                    "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.QuobyteVolumeSource"
                        }
                    ]
                },
                "rbd": {
                    "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RBDPersistentVolumeSource"
                        }
                    ]
                },
                "scaleIO": {
                    "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ScaleIOPersistentVolumeSource"
                        }
                    ]
                },
                "storageClassName": {
                    "description": "storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value\nmeans that this volume does not belong to any StorageClass.\n+optional",
                    "type": "string"
                },
                "storageos": {
                    "description": "storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod\nMore info: https://examples.k8s.io/volumes/storageos/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StorageOSPersistentVolumeSource"
                        }
                    ]
                },
                "volumeAttributesClassName": {
                    "description": "Name of VolumeAttributesClass to which this persistent volume belongs. Empty value\nis not allowed. When this field is not set, it indicates that this volume does not belong to any\nVolumeAttributesClass. This field is mutable and can be changed by the CSI driver\nafter a volume has been updated successfully to a new class.\nFor an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound\nPersistentVolumeClaims during the binding process.\nThis is an alpha field and requires enabling VolumeAttributesClass feature.\n+featureGate=VolumeAttributesClass\n+optional",
                    "type": "string"
                },
                "volumeMode": {
                    "description": "volumeMode defines if a volume is intended to be used with a formatted filesystem\nor to remain in raw block state. Value of Filesystem is implied when not included in spec.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeMode"
                        }
                    ]
                },
                "vsphereVolume": {
                    "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.VsphereVirtualDiskVolumeSource"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeStatus": {
            "type": "object",
            "properties": {
                "lastPhaseTransitionTime": {
                    "description": "lastPhaseTransitionTime is the time the phase transitioned from one to another\nand automatically resets to current time everytime a volume phase transitions.\nThis is a beta field and requires the PersistentVolumeLastPhaseTransitionTime feature to be enabled (enabled by default).\n+featureGate=PersistentVolumeLastPhaseTransitionTime\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "message is a human-readable message indicating details about why the volume is in this state.\n+optional",
                    "type": "string"
                },
                "phase": {
                    "description": "phase indicates if a volume is available, bound to a claim, or released by a claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumePhase"
                        }
                    ]
                },
                "reason": {
                    "description": "reason is a brief CamelCase string that describes any failure and is meant\nfor machine parsing and tidy display in the CLI.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.PhotonPersistentDiskVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "pdID": {
                    "description": "pdID is the ID that identifies Photon Controller persistent disk",
                    "type": "string"
                }
            }
        },
        "v1.Pod": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Specification of the desired behavior of the pod.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Most recently observed status of the pod.\nThis data may not be up to date.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodStatus"
                        }
                    ]
                }
            }
        },
        "v1.PodAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PodAffinityTerm": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "matchLabelKeys": {
                    "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mismatchLabelKeys": {
                    "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespaceSelector": {
                    "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "namespaces": {
                    "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "topologyKey": {
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                    "type": "string"
                }
            }
        },
        "v1.PodAntiAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PodCondition": {
            "type": "object",
            "properties": {
                "lastProbeTime": {
                    "description": "Last time we probed the condition.\n+optional",
                    "type": "string"
                },
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "Human-readable message indicating details about last transition.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "Unique, one-word, CamelCase reason for the condition's last transition.\n+optional",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the condition.\nCan be True, False, Unknown.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type is the type of the condition.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodConditionType"
                        }
                    ]
                }
            }
        },
        "v1.PodConditionType": {
            "type": "string",
            "enum": [
                "ContainersReady",
                "Initialized",
                "Ready",
                "PodScheduled",
                "DisruptionTarget",
                "PodReadyToStartContainers"
            ],
            "x-enum-varnames": [
                "ContainersReady",
                "PodInitialized",
                "PodReady",
                "PodScheduled",
                "DisruptionTarget",
                "PodReadyToStartContainers"
            ]
        },
        "v1.PodDNSConfig": {
            "type": "object",
            "properties": {
                "nameservers": {
                    "description": "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.\nDuplicated nameservers will be removed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "options": {
                    "description": "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nDuplicated entries will be removed. Resolution options given in Options\nwill override those that appear in the base DNSPolicy.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodDNSConfigOption"
                    }
                },
                "searches": {
                    "description": "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.\nDuplicated search paths will be removed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.PodDNSConfigOption": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Required.",
                    "type": "string"
                },
                "value": {
                    "description": "+optional",
                    "type": "string"
                }
            }
        },
        "v1.PodFSGroupChangePolicy": {
            "type": "string",
            "enum": [
                "OnRootMismatch",
                "Always"
            ],
            "x-enum-varnames": [
                "FSGroupChangeOnRootMismatch",
                "FSGroupChangeAlways"
            ]
        },
        "v1.PodIP": {
            "type": "object",
            "properties": {
                "ip": {
                    "description": "IP is the IP address assigned to the pod",
                    "type": "string"
                }
            }
        },
        "v1.PodList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "List of pods.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Pod"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "v1.PodOS": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the operating system. The currently supported values are linux and windows.\nAdditional value may be defined in future and can be one of:\nhttps://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration\nClients should expect to handle additional values and treat unrecognized values in this field as os: null",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.OSName"
                        }
                    ]
                }
            }
        },
        "v1.PodPhase": {
            "type": "string",
            "enum": [
                "Pending",
                "Running",
                "Succeeded",
                "Failed",
                "Unknown"
            ],
            "x-enum-varnames": [
                "PodPending",
                "PodRunning",
                "PodSucceeded",
                "PodFailed",
                "PodUnknown"
            ]
        },
        "v1.PodQOSClass": {
            "type": "string",
            "enum": [
                "Guaranteed",
                "Burstable",
                "BestEffort"
            ],
            "x-enum-varnames": [
                "PodQOSGuaranteed",
                "PodQOSBurstable",
                "PodQOSBestEffort"
            ]
        },
        "v1.PodReadinessGate": {
            "type": "object",
            "properties": {
                "conditionType": {
                    "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodConditionType"
                        }
                    ]
                }
            }
        },
        "v1.PodResizeStatus": {
            "type": "string",
            "enum": [
                "Proposed",
                "InProgress",
                "Deferred",
                "Infeasible"
            ],
            "x-enum-varnames": [
                "PodResizeStatusProposed",
                "PodResizeStatusInProgress",
                "PodResizeStatusDeferred",
                "PodResizeStatusInfeasible"
            ]
        },
        "v1.PodResourceClaim": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name uniquely identifies this resource claim inside the pod.\nThis must be a DNS_LABEL.",
                    "type": "string"
                },
                "source": {
                    "description": "Source describes where to find the ResourceClaim.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ClaimSource"
                        }
                    ]
                }
            }
        },
        "v1.PodResourceClaimStatus": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name uniquely identifies this resource claim inside the pod.\nThis must match the name of an entry in pod.spec.resourceClaims,\nwhich implies that the string must be a DNS_LABEL.",
                    "type": "string"
                },
                "resourceClaimName": {
                    "description": "ResourceClaimName is the name of the ResourceClaim that was\ngenerated for the Pod in the namespace of the Pod. It this is\nunset, then generating a ResourceClaim was not necessary. The\npod.spec.resourceClaims entry can be ignored in this case.\n\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.PodSchedulingGate": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the scheduling gate.\nEach scheduling gate must have a unique name field.",
                    "type": "string"
                }
            }
        },
        "v1.PodSecurityContext": {
            "type": "object",
            "properties": {
                "appArmorProfile": {
                    "description": "appArmorProfile is the AppArmor options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AppArmorProfile"
                        }
                    ]
                },
                "fsGroup": {
                    "description": "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:\n\n1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "fsGroupChangePolicy": {
                    "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume\nbefore being exposed inside Pod. This field will only apply to\nvolume types which support fsGroup based ownership(and permissions).\nIt will have no effect on ephemeral volume types such as: secret, configmaps\nand emptydir.\nValid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodFSGroupChangePolicy"
                        }
                    ]
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "seLinuxOptions": {
                    "description": "The SELinux context to be applied to all containers.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in SecurityContext.  If set in\nboth SecurityContext and PodSecurityContext, the value specified in SecurityContext\ntakes precedence for that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SELinuxOptions"
                        }
                    ]
                },
                "seccompProfile": {
                    "description": "The seccomp options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfile"
                        }
                    ]
                },
                "supplementalGroups": {
                    "description": "A list of groups applied to the first process run in each container, in addition\nto the container's primary GID, the fsGroup (if specified), and group memberships\ndefined in the container image for the uid of the container process. If unspecified,\nno additional groups are added to any container. Note that group memberships\ndefined in the container image for the uid of the container process are still effective,\neven if they are not included in this list.\nNote that this field cannot be set when spec.os.name is windows.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sysctls": {
                    "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\nNote that this field cannot be set when spec.os.name is windows.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Sysctl"
                    }
                },
                "windowsOptions": {
                    "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options within a container's SecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
                        }
                    ]
                }
            }
        },
        "v1.PodSpec": {
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "Optional duration in seconds the pod may be active on the node relative to\nStartTime before the system will actively try to mark it failed and kill associated containers.\nValue must be a positive integer.\n+optional",
                    "type": "integer"
                },
                "affinity": {
                    "description": "If specified, the pod's scheduling constraints\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "automountServiceAccountToken": {
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n+optional",
                    "type": "boolean"
                },
                "containers": {
                    "description": "List of containers belonging to the pod.\nContainers cannot currently be added or removed.\nThere must be at least one container in a Pod.\nCannot be updated.\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Container"
                    }
                },
                "dnsConfig": {
                    "description": "Specifies the DNS parameters of a pod.\nParameters specified here will be merged to the generated DNS\nconfiguration based on DNSPolicy.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodDNSConfig"
                        }
                    ]
                },
                "dnsPolicy": {
                    "description": "Set DNS policy for the pod.\nDefaults to \"ClusterFirst\".\nValid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.\nDNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.\nTo have DNS options set along with hostNetwork, you have to specify DNS policy\nexplicitly to 'ClusterFirstWithHostNet'.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DNSPolicy"
                        }
                    ]
                },
                "enableServiceLinks": {
                    "description": "EnableServiceLinks indicates whether information about services should be injected into pod's\nenvironment variables, matching the syntax of Docker links.\nOptional: Defaults to true.\n+optional",
                    "type": "boolean"
                },
                "ephemeralContainers": {
                    "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing\npod to perform user-initiated actions such as debugging. This list cannot be specified when\ncreating a pod, and it cannot be modified by updating the pod spec. In order to add an\nephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EphemeralContainer"
                    }
                },
                "hostAliases": {
                    "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts\nfile if specified.\n+optional\n+patchMergeKey=ip\n+patchStrategy=merge\n+listType=map\n+listMapKey=ip",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HostAlias"
                    }
                },
                "hostIPC": {
                    "description": "Use the host's ipc namespace.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
                    "type": "boolean"
                },
                "hostNetwork": {
                    "description": "Host networking requested for this pod. Use the host's network namespace.\nIf this option is set, the ports that will be used must be specified.\nDefault to false.\n+k8s:conversion-gen=false\n+optional",
                    "type": "boolean"
                },
                "hostPID": {
                    "description": "Use the host's pid namespace.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
                    "type": "boolean"
                },
                "hostUsers": {
                    "description": "Use the host's user namespace.\nOptional: Default to true.\nIf set to true or not present, the pod will be run in the host user namespace, useful\nfor when the pod needs a feature only available to the host user namespace, such as\nloading a kernel module with CAP_SYS_MODULE.\nWhen set to false, a new userns is created for the pod. Setting false is useful for\nmitigating container breakout vulnerabilities even allowing users to run their\ncontainers as root without actually having root privileges on the host.\nThis field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.\n+k8s:conversion-gen=false\n+optional",
                    "type": "boolean"
                },
                "hostname": {
                    "description": "Specifies the hostname of the Pod\nIf not specified, the pod's hostname will be set to a system-defined value.\n+optional",
                    "type": "string"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.\nIf specified, these secrets will be passed to individual puller implementations for them to use.\nMore info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LocalObjectReference"
                    }
                },
                "initContainers": {
                    "description": "List of initialization containers belonging to the pod.\nInit containers are executed in order prior to containers being started. If any\ninit container fails, the pod is considered to have failed and is handled according\nto its restartPolicy. The name for an init container or normal container must be\nunique among all containers.\nInit containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.\nThe resourceRequirements of an init container are taken into account during scheduling\nby finding the highest request/limit for each resource type, and then using the max of\nof that value or the sum of the normal containers. Limits are applied to init containers\nin a similar fashion.\nInit containers cannot currently be added or removed.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Container"
                    }
                },
                "nodeName": {
                    "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty,\nthe scheduler simply schedules this pod onto that node, assuming that it fits resource\nrequirements.\n+optional",
                    "type": "string"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n+optional\n+mapType=atomic",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "os": {
                    "description": "Specifies the OS of the containers in the pod.\nSome pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset:\n-securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset:\n- spec.hostPID\n- spec.hostIPC\n- spec.hostUsers\n- spec.securityContext.appArmorProfile\n- spec.securityContext.seLinuxOptions\n- spec.securityContext.seccompProfile\n- spec.securityContext.fsGroup\n- spec.securityContext.fsGroupChangePolicy\n- spec.securityContext.sysctls\n- spec.shareProcessNamespace\n- spec.securityContext.runAsUser\n- spec.securityContext.runAsGroup\n- spec.securityContext.supplementalGroups\n- spec.containers[*].securityContext.appArmorProfile\n- spec.containers[*].securityContext.seLinuxOptions\n- spec.containers[*].securityContext.seccompProfile\n- spec.containers[*].securityContext.capabilities\n- spec.containers[*].securityContext.readOnlyRootFilesystem\n- spec.containers[*].securityContext.privileged\n- spec.containers[*].securityContext.allowPrivilegeEscalation\n- spec.containers[*].securityContext.procMount\n- spec.containers[*].securityContext.runAsUser\n- spec.containers[*].securityContext.runAsGroup\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodOS"
                        }
                    ]
                },
                "overhead": {
                    "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.\nThis field will be autopopulated at admission time by the RuntimeClass admission controller. If\nthe RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.\nThe RuntimeClass admission controller will reject Pod create requests which have the overhead already\nset. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value\ndefined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.\nMore info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "preemptionPolicy": {
                    "description": "PreemptionPolicy is the Policy for preempting pods with lower priority.\nOne of Never, PreemptLowerPriority.\nDefaults to PreemptLowerPriority if unset.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PreemptionPolicy"
                        }
                    ]
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the\npriority of the pod. When Priority Admission Controller is enabled, it\nprevents users from setting this field. The admission controller populates\nthis field from PriorityClassName.\nThe higher the value, the higher the priority.\n+optional",
                    "type": "integer"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the pod's priority. \"system-node-critical\" and\n\"system-cluster-critical\" are two special keywords which indicate the\nhighest priorities with the former being the highest priority. Any other\nname must be defined by creating a PriorityClass object with that name.\nIf not specified, the pod priority will be default or zero if there is no\ndefault.\n+optional",
                    "type": "string"
                },
                "readinessGates": {
                    "description": "If specified, all readiness gates will be evaluated for pod readiness.\nA pod is ready when all its containers are ready AND\nall conditions specified in the readiness gates have status equal to \"True\"\nMore info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodReadinessGate"
                    }
                },
                "resourceClaims": {
                    "description": "ResourceClaims defines which ResourceClaims must be allocated\nand reserved before the Pod is allowed to start. The resources\nwill be made available to those containers which consume them\nby name.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable.\n\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodResourceClaim"
                    }
                },
                "restartPolicy": {
                    "description": "Restart policy for all containers within the pod.\nOne of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.\nDefault to Always.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RestartPolicy"
                        }
                    ]
                },
                "runtimeClassName": {
                    "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used\nto run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.\nIf unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an\nempty definition that uses the default runtime handler.\nMore info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class\n+optional",
                    "type": "string"
                },
                "schedulerName": {
                    "description": "If specified, the pod will be dispatched by specified scheduler.\nIf not specified, the pod will be dispatched by default scheduler.\n+optional",
                    "type": "string"
                },
                "schedulingGates": {
                    "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod.\nIf schedulingGates is not empty, the pod will stay in the SchedulingGated state and the\nscheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.\n\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodSchedulingGate"
                    }
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings.\nOptional: Defaults to empty.  See type description for default values of each field.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodSecurityContext"
                        }
                    ]
                },
                "serviceAccount": {
                    "description": "DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.\nDeprecated: Use serviceAccountName instead.\n+k8s:conversion-gen=false\n+optional",
                    "type": "string"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n+optional",
                    "type": "string"
                },
                "setHostnameAsFQDN": {
                    "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).\nIn Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).\nIn Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN.\nIf a pod does not have FQDN, this has no effect.\nDefault to false.\n+optional",
                    "type": "boolean"
                },
                "shareProcessNamespace": {
                    "description": "Share a single process namespace between all of the containers in a pod.\nWhen this is set containers will be able to view and signal processes from other containers\nin the same pod, and the first process in each container will not be assigned PID 1.\nHostPID and ShareProcessNamespace cannot both be set.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
                    "type": "boolean"
                },
                "subdomain": {
                    "description": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\".\nIf not specified, the pod will not have a domainname at all.\n+optional",
                    "type": "string"
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nIf this value is nil, the default grace period will be used instead.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nDefaults to 30 seconds.\n+optional",
                    "type": "integer"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology\ndomains. Scheduler will schedule pods in a way which abides by the constraints.\nAll topologySpreadConstraints are ANDed.\n+optional\n+patchMergeKey=topologyKey\n+patchStrategy=merge\n+listType=map\n+listMapKey=topologyKey\n+listMapKey=whenUnsatisfiable",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TopologySpreadConstraint"
                    }
                },
                "volumes": {
                    "description": "List of volumes that can be mounted by containers belonging to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes\n+optional\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Volume"
                    }
                }
            }
        },
        "v1.PodStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Current service state of pod.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodCondition"
                    }
                },
                "containerStatuses": {
                    "description": "The list has one entry per container in the manifest.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerStatus"
                    }
                },
                "ephemeralContainerStatuses": {
                    "description": "Status for any ephemeral containers that have run in this pod.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerStatus"
                    }
                },
                "hostIP": {
                    "description": "hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet.\nA pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will\nnot be updated even if there is a node is assigned to pod\n+optional",
                    "type": "string"
                },
                "hostIPs": {
                    "description": "hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must\nmatch the hostIP field. This list is empty if the pod has not started yet.\nA pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will\nnot be updated even if there is a node is assigned to this pod.\n+optional\n+patchStrategy=merge\n+patchMergeKey=ip\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HostIP"
                    }
                },
                "initContainerStatuses": {
                    "description": "The list has one entry per init container in the manifest. The most recent successful\ninit container will have ready = true, the most recently started container will have\nstartTime set.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerStatus"
                    }
                },
                "message": {
                    "description": "A human readable message indicating details about why the pod is in this condition.\n+optional",
                    "type": "string"
                },
                "nominatedNodeName": {
                    "description": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be\nscheduled right away as preemption victims receive their graceful termination periods.\nThis field does not guarantee that the pod will be scheduled on this node. Scheduler may decide\nto place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to\ngive the resources on this node to a higher priority pod that is created after preemption.\nAs a result, this field may be different than PodSpec.nodeName when the pod is\nscheduled.\n+optional",
                    "type": "string"
                },
                "phase": {
                    "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle.\nThe conditions array, the reason and message fields, and the individual container status\narrays contain more detail about the pod's status.\nThere are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the\ncontainer images has not been created. This includes time before being scheduled as\nwell as time spent downloading images over the network, which could take a while.\nRunning: The pod has been bound to a node, and all of the containers have been created.\nAt least one container is still running, or is in the process of starting or restarting.\nSucceeded: All containers in the pod have terminated in success, and will not be restarted.\nFailed: All containers in the pod have terminated, and at least one container has\nterminated in failure. The container either exited with non-zero status or was terminated\nby the system.\nUnknown: For some reason the state of the pod could not be obtained, typically due to an\nerror in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodPhase"
                        }
                    ]
                },
                "podIP": {
                    "description": "podIP address allocated to the pod. Routable at least within the cluster.\nEmpty if not yet allocated.\n+optional",
                    "type": "string"
                },
                "podIPs": {
                    "description": "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must\nmatch the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list\nis empty if no IPs have been allocated yet.\n+optional\n+patchStrategy=merge\n+patchMergeKey=ip\n+listType=map\n+listMapKey=ip",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodIP"
                    }
                },
                "qosClass": {
                    "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements\nSee PodQOSClass type for available QOS classes\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodQOSClass"
                        }
                    ]
                },
                "reason": {
                    "description": "A brief CamelCase message indicating details about why the pod is in this state.\ne.g. 'Evicted'\n+optional",
                    "type": "string"
                },
                "resize": {
                    "description": "Status of resources resize desired for pod's containers.\nIt is empty if no resources resize is pending.\nAny changes to container resources will automatically set this to \"Proposed\"\n+featureGate=InPlacePodVerticalScaling\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodResizeStatus"
                        }
                    ]
                },
                "resourceClaimStatuses": {
                    "description": "Status of resource claims.\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodResourceClaimStatus"
                    }
                },
                "startTime": {
                    "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet.\nThis is before the Kubelet pulled the container image(s) for the pod.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.PodTemplateSpec": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Specification of the desired behavior of the pod.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodSpec"
                        }
                    ]
                }
            }
        },
        "v1.PortStatus": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error is to record the problem with the service port\nThe format of the error shall comply with the following rules:\n- built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+optional\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`\n+kubebuilder:validation:MaxLength=316",
                    "type": "string"
                },
                "port": {
                    "description": "Port is the port number of the service port of which status is recorded here",
                    "type": "integer"
                },
                "protocol": {
                    "description": "Protocol is the protocol of the service port of which status is recorded here\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                }
            }
        },
        "v1.PortworxVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "volumeID uniquely identifies a Portworx volume",
                    "type": "string"
                }
            }
        },
        "v1.PreemptionPolicy": {
            "type": "string",
            "enum": [
                "PreemptLowerPriority",
                "Never"
            ],
            "x-enum-varnames": [
                "PreemptLowerPriority",
                "PreemptNever"
            ]
        },
        "v1.PreferredSchedulingTerm": {
            "type": "object",
            "properties": {
                "preference": {
                    "description": "A node selector term, associated with the corresponding weight.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelectorTerm"
                        }
                    ]
                },
                "weight": {
                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.Probe": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ExecAction"
                        }
                    ]
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GRPCAction"
                        }
                    ]
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPGetAction"
                        }
                    ]
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "type": "integer"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TCPSocketAction"
                        }
                    ]
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n+optional",
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.ProcMountType": {
            "type": "string",
            "enum": [
                "Default",
                "Unmasked"
            ],
            "x-enum-varnames": [
                "DefaultProcMount",
                "UnmaskedProcMount"
            ]
        },
        "v1.ProjectedVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "sources": {
                    "description": "sources is the list of volume projections\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeProjection"
                    }
                }
            }
        },
        "v1.Protocol": {
            "type": "string",
            "enum": [
                "TCP",
                "UDP",
                "SCTP"
            ],
            "x-enum-varnames": [
                "ProtocolTCP",
                "ProtocolUDP",
                "ProtocolSCTP"
            ]
        },
        "v1.PullPolicy": {
            "type": "string",
            "enum": [
                "Always",
                "Never",
                "IfNotPresent"
            ],
            "x-enum-varnames": [
                "PullAlways",
                "PullNever",
                "PullIfNotPresent"
            ]
        },
        "v1.QuobyteVolumeSource": {
            "type": "object",
            "properties": {
                "group": {
                    "description": "group to map volume access to\nDefault is no group\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "registry": {
                    "description": "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes",
                    "type": "string"
                },
                "tenant": {
                    "description": "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin\n+optional",
                    "type": "string"
                },
                "user": {
                    "description": "user to map volume access to\nDefaults to serivceaccount user\n+optional",
                    "type": "string"
                },
                "volume": {
                    "description": "volume is a string that references an already created Quobyte volume by name.",
                    "type": "string"
                }
            }
        },
        "v1.RBDPersistentVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "image": {
                    "description": "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "keyring": {
                    "description": "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "string"
                },
                "monitors": {
                    "description": "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pool": {
                    "description": "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                },
                "user": {
                    "description": "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.RBDVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "image": {
                    "description": "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "keyring": {
                    "description": "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "string"
                },
                "monitors": {
                    "description": "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pool": {
                    "description": "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "user": {
                    "description": "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.RecursiveReadOnlyMode": {
            "type": "string",
            "enum": [
                "Disabled",
                "IfPossible",
                "Enabled"
            ],
            "x-enum-varnames": [
                "RecursiveReadOnlyDisabled",
                "RecursiveReadOnlyIfPossible",
                "RecursiveReadOnlyEnabled"
            ]
        },
        "v1.ReplicaSet": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "If the Labels of a ReplicaSet are empty, they are defaulted to\nbe the same as the Pod(s) that the ReplicaSet manages.\nStandard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Spec defines the specification of the desired behavior of the ReplicaSet.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ReplicaSetSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Status is the most recently observed status of the ReplicaSet.\nThis data may be out of date by some window of time.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ReplicaSetStatus"
                        }
                    ]
                }
            }
        },
        "v1.ReplicaSetCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "The last time the condition transitioned from one status to another.\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.\n+optional",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of replica set condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ReplicaSetConditionType"
                        }
                    ]
                }
            }
        },
        "v1.ReplicaSetConditionType": {
            "type": "string",
            "enum": [
                "ReplicaFailure"
            ],
            "x-enum-varnames": [
                "ReplicaSetReplicaFailure"
            ]
        },
        "v1.ReplicaSetList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "List of ReplicaSets.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ReplicaSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "v1.ReplicaSetSpec": {
            "type": "object",
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready\nwithout any of its container crashing, for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)\n+optional",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Replicas is the number of desired replicas.\nThis is a pointer to distinguish between explicit zero and unspecified.\nDefaults to 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller\n+optional",
                    "type": "integer"
                },
                "selector": {
                    "description": "Selector is a label query over pods that should match the replica count.\nLabel keys and values that must match in order to be controlled by this replica set.\nIt must match the pod template's labels.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "template": {
                    "description": "Template is the object that describes the pod that will be created if\ninsufficient replicas are detected.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodTemplateSpec"
                        }
                    ]
                }
            }
        },
        "v1.ReplicaSetStatus": {
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.\n+optional",
                    "type": "integer"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a replica set's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ReplicaSetCondition"
                    }
                },
                "fullyLabeledReplicas": {
                    "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.\n+optional",
                    "type": "integer"
                },
                "observedGeneration": {
                    "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.\n+optional",
                    "type": "integer"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.\n+optional",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Replicas is the most recently observed number of replicas.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
                    "type": "integer"
                }
            }
        },
        "v1.ResourceClaim": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                    "type": "string"
                }
            }
        },
        "v1.ResourceFieldSelector": {
            "type": "object",
            "properties": {
                "containerName": {
                    "description": "Container name: required for volumes, optional for env vars\n+optional",
                    "type": "string"
                },
                "divisor": {
                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resource.Quantity"
                        }
                    ]
                },
                "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                }
            }
        },
        "v1.ResourceList": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/resource.Quantity"
            }
        },
        "v1.ResourceName": {
            "type": "string",
            "enum": [
                "cpu",
                "memory",
                "storage",
                "ephemeral-storage",
                "pods",
                "services",
                "replicationcontrollers",
                "resourcequotas",
                "secrets",
                "configmaps",
                "persistentvolumeclaims",
                "services.nodeports",
                "services.loadbalancers",
                "requests.cpu",
                "requests.memory",
                "requests.storage",
                "requests.ephemeral-storage",
                "limits.cpu",
                "limits.memory",
                "limits.ephemeral-storage"
            ],
            "x-enum-varnames": [
                "ResourceCPU",
                "ResourceMemory",
                "ResourceStorage",
                "ResourceEphemeralStorage",
                "ResourcePods",
                "ResourceServices",
                "ResourceReplicationControllers",
                "ResourceQuotas",
                "ResourceSecrets",
                "ResourceConfigMaps",
                "ResourcePersistentVolumeClaims",
                "ResourceServicesNodePorts",
                "ResourceServicesLoadBalancers",
                "ResourceRequestsCPU",
                "ResourceRequestsMemory",
                "ResourceRequestsStorage",
                "ResourceRequestsEphemeralStorage",
                "ResourceLimitsCPU",
                "ResourceLimitsMemory",
                "ResourceLimitsEphemeralStorage"
            ]
        },
        "v1.ResourceRequirements": {
            "type": "object",
            "properties": {
                "claims": {
                    "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.\n\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ResourceClaim"
                    }
                },
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                }
            }
        },
        "v1.ResourceResizeRestartPolicy": {
            "type": "string",
            "enum": [
                "NotRequired",
                "RestartContainer"
            ],
            "x-enum-varnames": [
                "NotRequired",
                "RestartContainer"
            ]
        },
        "v1.RestartPolicy": {
            "type": "string",
            "enum": [
                "Always",
                "OnFailure",
                "Never"
            ],
            "x-enum-varnames": [
                "RestartPolicyAlways",
                "RestartPolicyOnFailure",
                "RestartPolicyNever"
            ]
        },
        "v1.RollingUpdateDeployment": {
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of pods that can be scheduled above the desired number of\npods.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nThis can not be 0 if MaxUnavailable is 0.\nAbsolute number is calculated from percentage by rounding up.\nDefaults to 25%.\nExample: when this is set to 30%, the new ReplicaSet can be scaled up immediately when\nthe rolling update starts, such that the total number of old and new pods do not exceed\n130% of desired pods. Once old pods have been killed,\nnew ReplicaSet can be scaled up further, ensuring that total number of pods running\nat any time during the update is at most 130% of desired pods.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                },
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during the update.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nAbsolute number is calculated from percentage by rounding down.\nThis can not be 0 if MaxSurge is 0.\nDefaults to 25%.\nExample: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods\nimmediately when the rolling update starts. Once new pods are ready, old ReplicaSet\ncan be scaled down further, followed by scaling up the new ReplicaSet, ensuring\nthat the total number of pods available at all times during the update is at\nleast 70% of desired pods.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.SELinuxOptions": {
            "type": "object",
            "properties": {
                "level": {
                    "description": "Level is SELinux level label that applies to the container.\n+optional",
                    "type": "string"
                },
                "role": {
                    "description": "Role is a SELinux role label that applies to the container.\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "Type is a SELinux type label that applies to the container.\n+optional",
                    "type": "string"
                },
                "user": {
                    "description": "User is a SELinux user label that applies to the container.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ScaleIOPersistentVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\"\n+optional",
                    "type": "string"
                },
                "gateway": {
                    "description": "gateway is the host address of the ScaleIO API Gateway.",
                    "type": "string"
                },
                "protectionDomain": {
                    "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretReference"
                        }
                    ]
                },
                "sslEnabled": {
                    "description": "sslEnabled is the flag to enable/disable SSL communication with Gateway, default false\n+optional",
                    "type": "boolean"
                },
                "storageMode": {
                    "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.\n+optional",
                    "type": "string"
                },
                "storagePool": {
                    "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.\n+optional",
                    "type": "string"
                },
                "system": {
                    "description": "system is the name of the storage system as configured in ScaleIO.",
                    "type": "string"
                },
                "volumeName": {
                    "description": "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
                    "type": "string"
                }
            }
        },
        "v1.ScaleIOVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\".\n+optional",
                    "type": "string"
                },
                "gateway": {
                    "description": "gateway is the host address of the ScaleIO API Gateway.",
                    "type": "string"
                },
                "protectionDomain": {
                    "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "sslEnabled": {
                    "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false\n+optional",
                    "type": "boolean"
                },
                "storageMode": {
                    "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.\n+optional",
                    "type": "string"
                },
                "storagePool": {
                    "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.\n+optional",
                    "type": "string"
                },
                "system": {
                    "description": "system is the name of the storage system as configured in ScaleIO.",
                    "type": "string"
                },
                "volumeName": {
                    "description": "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
                    "type": "string"
                }
            }
        },
        "v1.SeccompProfile": {
            "type": "object",
            "properties": {
                "localhostProfile": {
                    "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.\n+unionDiscriminator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfileType"
                        }
                    ]
                }
            }
        },
        "v1.SeccompProfileType": {
            "type": "string",
            "enum": [
                "Unconfined",
                "RuntimeDefault",
                "Localhost"
            ],
            "x-enum-varnames": [
                "SeccompProfileTypeUnconfined",
                "SeccompProfileTypeRuntimeDefault",
                "SeccompProfileTypeLocalhost"
            ]
        },
        "v1.Secret": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "data": {
                    "description": "Data contains the secret data. Each key must consist of alphanumeric\ncharacters, '-', '_' or '.'. The serialized form of the secret data is a\nbase64 encoded string, representing the arbitrary (possibly non-string)\ndata value here. Described in https://tools.ietf.org/html/rfc4648#section-4\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "immutable": {
                    "description": "Immutable, if set to true, ensures that data stored in the Secret cannot\nbe updated (only object metadata can be modified).\nIf not set to true, the field can be modified at any time.\nDefaulted to nil.\n+optional",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "stringData": {
                    "description": "stringData allows specifying non-binary secret data in string form.\nIt is provided as a write-only input field for convenience.\nAll keys and values are merged into the data field on write, overwriting any existing values.\nThe stringData field is never output when reading from the API.\n+k8s:conversion-gen=false\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Used to facilitate programmatic handling of secret data.\nMore info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretType"
                        }
                    ]
                }
            }
        },
        "v1.SecretEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of secret objects.\nMore info: https://kubernetes.io/docs/concepts/configuration/secret",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Secret"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "v1.SecretProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "optional field specify whether the Secret or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretReference": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "name is unique within a namespace to reference a secret resource.\n+optional",
                    "type": "string"
                },
                "namespace": {
                    "description": "namespace defines the space within which the secret name must be unique.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.SecretType": {
            "type": "string",
            "enum": [
                "Opaque",
                "kubernetes.io/service-account-token",
                "kubernetes.io/dockercfg",
                "kubernetes.io/dockerconfigjson",
                "kubernetes.io/basic-auth",
                "kubernetes.io/ssh-auth",
                "kubernetes.io/tls",
                "bootstrap.kubernetes.io/token"
            ],
            "x-enum-varnames": [
                "SecretTypeOpaque",
                "SecretTypeServiceAccountToken",
                "SecretTypeDockercfg",
                "SecretTypeDockerConfigJson",
                "SecretTypeBasicAuth",
                "SecretTypeSSHAuth",
                "SecretTypeTLS",
                "SecretTypeBootstrapToken"
            ]
        },
        "v1.SecretVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "items": {
                    "description": "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "optional": {
                    "description": "optional field specify whether the Secret or its keys must be defined\n+optional",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.SecurityContext": {
            "type": "object",
            "properties": {
                "allowPrivilegeEscalation": {
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "appArmorProfile": {
                    "description": "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AppArmorProfile"
                        }
                    ]
                },
                "capabilities": {
                    "description": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Capabilities"
                        }
                    ]
                },
                "privileged": {
                    "description": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "procMount": {
                    "description": "procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ProcMountType"
                        }
                    ]
                },
                "readOnlyRootFilesystem": {
                    "description": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "seLinuxOptions": {
                    "description": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SELinuxOptions"
                        }
                    ]
                },
                "seccompProfile": {
                    "description": "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod \u0026 container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfile"
                        }
                    ]
                },
                "windowsOptions": {
                    "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
                        }
                    ]
                }
            }
        },
        "v1.Service": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Spec defines the behavior of a service.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Most recently observed status of the service.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceStatus"
                        }
                    ]
                }
            }
        },
        "v1.ServiceAccountTokenProjection": {
            "type": "object",
            "properties": {
                "audience": {
                    "description": "audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.\n+optional",
                    "type": "string"
                },
                "expirationSeconds": {
                    "description": "expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "path is the path relative to the mount point of the file to project the\ntoken into.",
                    "type": "string"
                }
            }
        },
        "v1.ServiceAffinity": {
            "type": "string",
            "enum": [
                "ClientIP",
                "None"
            ],
            "x-enum-varnames": [
                "ServiceAffinityClientIP",
                "ServiceAffinityNone"
            ]
        },
        "v1.ServiceBackendPort": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "name is the name of the port on the Service.\nThis is a mutually exclusive setting with \"Number\".\n+optional",
                    "type": "string"
                },
                "number": {
                    "description": "number is the numerical port number (e.g. 80) on the Service.\nThis is a mutually exclusive setting with \"Name\".\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.ServiceExternalTrafficPolicy": {
            "type": "string",
            "enum": [
                "Cluster",
                "Local",
                "Local",
                "Cluster"
            ],
            "x-enum-varnames": [
                "ServiceExternalTrafficPolicyCluster",
                "ServiceExternalTrafficPolicyLocal",
                "ServiceExternalTrafficPolicyTypeLocal",
                "ServiceExternalTrafficPolicyTypeCluster"
            ]
        },
        "v1.ServiceInternalTrafficPolicy": {
            "type": "string",
            "enum": [
                "Cluster",
                "Local"
            ],
            "x-enum-varnames": [
                "ServiceInternalTrafficPolicyCluster",
                "ServiceInternalTrafficPolicyLocal"
            ]
        },
        "v1.ServiceList": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "List of services",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Service"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ListMeta"
                        }
                    ]
                }
            }
        },
        "v1.ServicePort": {
            "type": "object",
            "properties": {
                "appProtocol": {
                    "description": "The application protocol for this port.\nThis is used as a hint for implementations to offer richer behavior for protocols that they understand.\nThis field follows standard Kubernetes label syntax.\nValid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per\nRFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as\nmycompany.com/my-custom-protocol.\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this port within the service. This must be a DNS_LABEL.\nAll ports within a ServiceSpec must have unique names. When considering\nthe endpoints for a Service, this must match the 'name' field in the\nEndpointPort.\nOptional if only one ServicePort is defined on this service.\n+optional",
                    "type": "string"
                },
                "nodePort": {
                    "description": "The port on each node on which this service is exposed when type is\nNodePort or LoadBalancer.  Usually assigned by the system. If a value is\nspecified, in-range, and not in use it will be used, otherwise the\noperation will fail.  If not specified, a port will be allocated if this\nService requires one.  If this field is specified when creating a\nService which does not need it, creation will fail. This field will be\nwiped when updating a Service to no longer need it (e.g. changing type\nfrom NodePort to ClusterIP).\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n+optional",
                    "type": "integer"
                },
                "port": {
                    "description": "The port that will be exposed by this service.",
                    "type": "integer"
                },
                "protocol": {
                    "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\".\nDefault is TCP.\n+default=\"TCP\"\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                },
                "targetPort": {
                    "description": "Number or name of the port to access on the pods targeted by the service.\nNumber must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\nIf this is a string, it will be looked up as a named port in the\ntarget Pod's container ports. If this is not specified, the value\nof the 'port' field is used (an identity map).\nThis field is ignored for services with clusterIP=None, and should be\nomitted or set equal to the 'port' field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.ServiceSpec": {
            "type": "object",
            "properties": {
                "allocateLoadBalancerNodePorts": {
                    "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically\nallocated for services with type LoadBalancer.  Default is \"true\". It\nmay be set to \"false\" if the cluster load-balancer does not rely on\nNodePorts.  If the caller requests specific NodePorts (by specifying a\nvalue), those requests will be respected, regardless of this field.\nThis field may only be set for services with type LoadBalancer and will\nbe cleared if the type is changed to any other type.\n+optional",
                    "type": "boolean"
                },
                "clusterIP": {
                    "description": "clusterIP is the IP address of the service and is usually assigned\nrandomly. If an address is specified manually, is in-range (as per\nsystem configuration), and is not in use, it will be allocated to the\nservice; otherwise creation of the service will fail. This field may not\nbe changed through updates unless the type field is also being changed\nto ExternalName (which requires this field to be blank) or the type\nfield is being changed from ExternalName (in which case this field may\noptionally be specified, as describe above).  Valid values are \"None\",\nempty string (\"\"), or a valid IP address. Setting this to \"None\" makes a\n\"headless service\" (no virtual IP), which is useful when direct endpoint\nconnections are preferred and proxying is not required.  Only applies to\ntypes ClusterIP, NodePort, and LoadBalancer. If this field is specified\nwhen creating a Service of type ExternalName, creation will fail. This\nfield will be wiped when updating a Service to type ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+optional",
                    "type": "string"
                },
                "clusterIPs": {
                    "description": "ClusterIPs is a list of IP addresses assigned to this service, and are\nusually assigned randomly.  If an address is specified manually, is\nin-range (as per system configuration), and is not in use, it will be\nallocated to the service; otherwise creation of the service will fail.\nThis field may not be changed through updates unless the type field is\nalso being changed to ExternalName (which requires this field to be\nempty) or the type field is being changed from ExternalName (in which\ncase this field may optionally be specified, as describe above).  Valid\nvalues are \"None\", empty string (\"\"), or a valid IP address.  Setting\nthis to \"None\" makes a \"headless service\" (no virtual IP), which is\nuseful when direct endpoint connections are preferred and proxying is\nnot required.  Only applies to types ClusterIP, NodePort, and\nLoadBalancer. If this field is specified when creating a Service of type\nExternalName, creation will fail. This field will be wiped when updating\na Service to type ExternalName.  If this field is not specified, it will\nbe initialized from the clusterIP field.  If this field is specified,\nclients must ensure that clusterIPs[0] and clusterIP have the same\nvalue.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order).\nThese IPs must correspond to the values of the ipFamilies field. Both\nclusterIPs and ipFamilies are governed by the ipFamilyPolicy field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalIPs": {
                    "description": "externalIPs is a list of IP addresses for which nodes in the cluster\nwill also accept traffic for this service.  These IPs are not managed by\nKubernetes.  The user is responsible for ensuring that traffic arrives\nat a node with this IP.  A common example is external load-balancers\nthat are not part of the Kubernetes system.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalName": {
                    "description": "externalName is the external reference that discovery mechanisms will\nreturn as an alias for this service (e.g. a DNS CNAME record). No\nproxying will be involved.  Must be a lowercase RFC-1123 hostname\n(https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\".\n+optional",
                    "type": "string"
                },
                "externalTrafficPolicy": {
                    "description": "externalTrafficPolicy describes how nodes distribute service traffic they\nreceive on one of the Service's \"externally-facing\" addresses (NodePorts,\nExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure\nthe service in a way that assumes that external load balancers will take care\nof balancing the service traffic between nodes, and so each node will deliver\ntraffic only to the node-local endpoints of the service, without masquerading\nthe client source IP. (Traffic mistakenly sent to a node with no endpoints will\nbe dropped.) The default value, \"Cluster\", uses the standard behavior of\nrouting to all endpoints evenly (possibly modified by topology and other\nfeatures). Note that traffic sent to an External IP or LoadBalancer IP from\nwithin the cluster will always get \"Cluster\" semantics, but clients sending to\na NodePort from within the cluster may need to take traffic policy into account\nwhen picking a node.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceExternalTrafficPolicy"
                        }
                    ]
                },
                "healthCheckNodePort": {
                    "description": "healthCheckNodePort specifies the healthcheck nodePort for the service.\nThis only applies when type is set to LoadBalancer and\nexternalTrafficPolicy is set to Local. If a value is specified, is\nin-range, and is not in use, it will be used.  If not specified, a value\nwill be automatically allocated.  External systems (e.g. load-balancers)\ncan use this port to determine if a given node holds endpoints for this\nservice or not.  If this field is specified when creating a Service\nwhich does not need it, creation will fail. This field will be wiped\nwhen updating a Service to no longer need it (e.g. changing type).\nThis field cannot be updated once set.\n+optional",
                    "type": "integer"
                },
                "internalTrafficPolicy": {
                    "description": "InternalTrafficPolicy describes how nodes distribute service traffic they\nreceive on the ClusterIP. If set to \"Local\", the proxy will assume that pods\nonly want to talk to endpoints of the service on the same node as the pod,\ndropping the traffic if there are no local endpoints. The default value,\n\"Cluster\", uses the standard behavior of routing to all endpoints evenly\n(possibly modified by topology and other features).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceInternalTrafficPolicy"
                        }
                    ]
                },
                "ipFamilies": {
                    "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this\nservice. This field is usually assigned automatically based on cluster\nconfiguration and the ipFamilyPolicy field. If this field is specified\nmanually, the requested family is available in the cluster,\nand ipFamilyPolicy allows it, it will be used; otherwise creation of\nthe service will fail. This field is conditionally mutable: it allows\nfor adding or removing a secondary IP family, but it does not allow\nchanging the primary IP family of the Service. Valid values are \"IPv4\"\nand \"IPv6\".  This field only applies to Services of types ClusterIP,\nNodePort, and LoadBalancer, and does apply to \"headless\" services.\nThis field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in\neither order).  These families must correspond to the values of the\nclusterIPs field, if specified. Both clusterIPs and ipFamilies are\ngoverned by the ipFamilyPolicy field.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IPFamily"
                    }
                },
                "ipFamilyPolicy": {
                    "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by\nthis Service. If there is no value provided, then this field will be set\nto SingleStack. Services can be \"SingleStack\" (a single IP family),\n\"PreferDualStack\" (two IP families on dual-stack configured clusters or\na single IP family on single-stack clusters), or \"RequireDualStack\"\n(two IP families on dual-stack configured clusters, otherwise fail). The\nipFamilies and clusterIPs fields depend on the value of this field. This\nfield will be wiped when updating a service to type ExternalName.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IPFamilyPolicy"
                        }
                    ]
                },
                "loadBalancerClass": {
                    "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to.\nIf specified, the value of this field must be a label-style identifier, with an optional prefix,\ne.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users.\nThis field can only be set when the Service type is 'LoadBalancer'. If not set, the default load\nbalancer implementation is used, today this is typically done through the cloud provider integration,\nbut should apply for any default implementation. If set, it is assumed that a load balancer\nimplementation is watching for Services with a matching class. Any default load balancer\nimplementation (e.g. cloud providers) should ignore Services that set this field.\nThis field can only be set when creating or updating a Service to type 'LoadBalancer'.\nOnce set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.\n+optional",
                    "type": "string"
                },
                "loadBalancerIP": {
                    "description": "Only applies to Service Type: LoadBalancer.\nThis feature depends on whether the underlying cloud-provider supports specifying\nthe loadBalancerIP when a load balancer is created.\nThis field will be ignored if the cloud-provider does not support the feature.\nDeprecated: This field was under-specified and its meaning varies across implementations.\nUsing it is non-portable and it may not support dual-stack.\nUsers are encouraged to use implementation-specific annotations when available.\n+optional",
                    "type": "string"
                },
                "loadBalancerSourceRanges": {
                    "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider\nload-balancer will be restricted to the specified client IPs. This field will be ignored if the\ncloud-provider does not support the feature.\"\nMore info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ports": {
                    "description": "The list of ports that are exposed by this service.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+patchMergeKey=port\n+patchStrategy=merge\n+listType=map\n+listMapKey=port\n+listMapKey=protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ServicePort"
                    }
                },
                "publishNotReadyAddresses": {
                    "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this\nService should disregard any indications of ready/not-ready.\nThe primary use case for setting this field is for a StatefulSet's Headless Service to\npropagate SRV DNS records for its Pods for the purpose of peer discovery.\nThe Kubernetes controllers that generate Endpoints and EndpointSlice resources for\nServices interpret this to mean that all endpoints are considered \"ready\" even if the\nPods themselves are not. Agents which consume only Kubernetes generated endpoints\nthrough the Endpoints or EndpointSlice resources can safely assume this behavior.\n+optional",
                    "type": "boolean"
                },
                "selector": {
                    "description": "Route service traffic to pods with label keys and values matching this\nselector. If empty or not present, the service is assumed to have an\nexternal process managing its endpoints, which Kubernetes will not\nmodify. Only applies to types ClusterIP, NodePort, and LoadBalancer.\nIgnored if type is ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\n+optional\n+mapType=atomic",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "sessionAffinity": {
                    "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity.\nEnable client IP based session affinity.\nMust be ClientIP or None.\nDefaults to None.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceAffinity"
                        }
                    ]
                },
                "sessionAffinityConfig": {
                    "description": "sessionAffinityConfig contains the configurations of session affinity.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SessionAffinityConfig"
                        }
                    ]
                },
                "trafficDistribution": {
                    "description": "TrafficDistribution offers a way to express preferences for how traffic is\ndistributed to Service endpoints. Implementations can use this field as a\nhint, but are not required to guarantee strict adherence. If the field is\nnot set, the implementation will apply its default routing strategy. If set\nto \"PreferClose\", implementations should prioritize endpoints that are\ntopologically close (e.g., same zone).\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid\noptions are ExternalName, ClusterIP, NodePort, and LoadBalancer.\n\"ClusterIP\" allocates a cluster-internal IP address for load-balancing\nto endpoints. Endpoints are determined by the selector or if that is not\nspecified, by manual construction of an Endpoints object or\nEndpointSlice objects. If clusterIP is \"None\", no virtual IP is\nallocated and the endpoints are published as a set of endpoints rather\nthan a virtual IP.\n\"NodePort\" builds on ClusterIP and allocates a port on every node which\nroutes to the same endpoints as the clusterIP.\n\"LoadBalancer\" builds on NodePort and creates an external load-balancer\n(if supported in the current cloud) which routes to the same endpoints\nas the clusterIP.\n\"ExternalName\" aliases this service to the specified externalName.\nSeveral other fields do not apply to ExternalName services.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceType"
                        }
                    ]
                }
            }
        },
        "v1.ServiceStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Current service state\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Condition"
                    }
                },
                "loadBalancer": {
                    "description": "LoadBalancer contains the current status of the load-balancer,\nif one is present.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LoadBalancerStatus"
                        }
                    ]
                }
            }
        },
        "v1.ServiceType": {
            "type": "string",
            "enum": [
                "ClusterIP",
                "NodePort",
                "LoadBalancer",
                "ExternalName"
            ],
            "x-enum-varnames": [
                "ServiceTypeClusterIP",
                "ServiceTypeNodePort",
                "ServiceTypeLoadBalancer",
                "ServiceTypeExternalName"
            ]
        },
        "v1.SessionAffinityConfig": {
            "type": "object",
            "properties": {
                "clientIP": {
                    "description": "clientIP contains the configurations of Client IP based session affinity.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ClientIPConfig"
                        }
                    ]
                }
            }
        },
        "v1.SleepAction": {
            "type": "object",
            "properties": {
                "seconds": {
                    "description": "Seconds is the number of seconds to sleep.",
                    "type": "integer"
                }
            }
        },
        "v1.StorageMedium": {
            "type": "string",
            "enum": [
                "",
                "Memory",
                "HugePages",
                "HugePages-"
            ],
            "x-enum-comments": {
                "StorageMediumDefault": "use whatever the default is for the node, assume anything we don't explicitly handle is this",
                "StorageMediumHugePages": "use hugepages",
                "StorageMediumHugePagesPrefix": "prefix for full medium notation HugePages-\u003csize\u003e",
                "StorageMediumMemory": "use memory (e.g. tmpfs on linux)"
            },
            "x-enum-varnames": [
                "StorageMediumDefault",
                "StorageMediumMemory",
                "StorageMediumHugePages",
                "StorageMediumHugePagesPrefix"
            ]
        },
        "v1.StorageOSPersistentVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectReference"
                        }
                    ]
                },
                "volumeName": {
                    "description": "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
                    "type": "string"
                },
                "volumeNamespace": {
                    "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.StorageOSVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "volumeName": {
                    "description": "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
                    "type": "string"
                },
                "volumeNamespace": {
                    "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.Sysctl": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of a property to set",
                    "type": "string"
                },
                "value": {
                    "description": "Value of a property to set",
                    "type": "string"
                }
            }
        },
        "v1.TCPSocketAction": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Optional: Host name to connect to, defaults to the pod IP.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.Taint": {
            "type": "object",
            "properties": {
                "effect": {
                    "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaintEffect"
                        }
                    ]
                },
                "key": {
                    "description": "Required. The taint key to be applied to a node.",
                    "type": "string"
                },
                "timeAdded": {
                    "description": "TimeAdded represents the time at which the taint was added.\nIt is only written for NoExecute taints.\n+optional",
                    "type": "string"
                },
                "value": {
                    "description": "The taint value corresponding to the taint key.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.TaintEffect": {
            "type": "string",
            "enum": [
                "NoSchedule",
                "PreferNoSchedule",
                "NoExecute"
            ],
            "x-enum-varnames": [
                "TaintEffectNoSchedule",
                "TaintEffectPreferNoSchedule",
                "TaintEffectNoExecute"
            ]
        },
        "v1.TerminationMessagePolicy": {
            "type": "string",
            "enum": [
                "File",
                "FallbackToLogsOnError"
            ],
            "x-enum-varnames": [
                "TerminationMessageReadFile",
                "TerminationMessageFallbackToLogsOnError"
            ]
        },
        "v1.Toleration": {
            "type": "object",
            "properties": {
                "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaintEffect"
                        }
                    ]
                },
                "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\n+optional",
                    "type": "string"
                },
                "operator": {
                    "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TolerationOperator"
                        }
                    ]
                },
                "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.\n+optional",
                    "type": "integer"
                },
                "value": {
                    "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.TolerationOperator": {
            "type": "string",
            "enum": [
                "Exists",
                "Equal"
            ],
            "x-enum-varnames": [
                "TolerationOpExists",
                "TolerationOpEqual"
            ]
        },
        "v1.TopologySpreadConstraint": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "matchLabelKeys": {
                    "description": "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxSkew": {
                    "description": "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |   P   |\n+-------+-------+-------+\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.",
                    "type": "integer"
                },
                "minDomains": {
                    "description": "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |  P P  |\n+-------+-------+-------+\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.\n+optional",
                    "type": "integer"
                },
                "nodeAffinityPolicy": {
                    "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeInclusionPolicy"
                        }
                    ]
                },
                "nodeTaintsPolicy": {
                    "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeInclusionPolicy"
                        }
                    ]
                },
                "topologyKey": {
                    "description": "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.",
                    "type": "string"
                },
                "whenUnsatisfiable": {
                    "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n| P P P |   P   |   P   |\n+-------+-------+-------+\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.UnsatisfiableConstraintAction"
                        }
                    ]
                }
            }
        },
        "v1.TypedLocalObjectReference": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string"
                }
            }
        },
        "v1.TypedObjectReference": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n+featureGate=CrossNamespaceVolumeDataSource\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.URIScheme": {
            "type": "string",
            "enum": [
                "HTTP",
                "HTTPS"
            ],
            "x-enum-varnames": [
                "URISchemeHTTP",
                "URISchemeHTTPS"
            ]
        },
        "v1.UnsatisfiableConstraintAction": {
            "type": "string",
            "enum": [
                "DoNotSchedule",
                "ScheduleAnyway"
            ],
            "x-enum-varnames": [
                "DoNotSchedule",
                "ScheduleAnyway"
            ]
        },
        "v1.Volume": {
            "type": "object",
            "properties": {
                "awsElasticBlockStore": {
                    "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AWSElasticBlockStoreVolumeSource"
                        }
                    ]
                },
                "azureDisk": {
                    "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureDiskVolumeSource"
                        }
                    ]
                },
                "azureFile": {
                    "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureFileVolumeSource"
                        }
                    ]
                },
                "cephfs": {
                    "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CephFSVolumeSource"
                        }
                    ]
                },
                "cinder": {
                    "description": "cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CinderVolumeSource"
                        }
                    ]
                },
                "configMap": {
                    "description": "configMap represents a configMap that should populate this volume\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapVolumeSource"
                        }
                    ]
                },
                "csi": {
                    "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CSIVolumeSource"
                        }
                    ]
                },
                "downwardAPI": {
                    "description": "downwardAPI represents downward API about the pod that should populate this volume\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DownwardAPIVolumeSource"
                        }
                    ]
                },
                "emptyDir": {
                    "description": "emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EmptyDirVolumeSource"
                        }
                    ]
                },
                "ephemeral": {
                    "description": "ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.\n\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EphemeralVolumeSource"
                        }
                    ]
                },
                "fc": {
                    "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FCVolumeSource"
                        }
                    ]
                },
                "flexVolume": {
                    "description": "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FlexVolumeSource"
                        }
                    ]
                },
                "flocker": {
                    "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FlockerVolumeSource"
                        }
                    ]
                },
                "gcePersistentDisk": {
                    "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GCEPersistentDiskVolumeSource"
                        }
                    ]
                },
                "gitRepo": {
                    "description": "gitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GitRepoVolumeSource"
                        }
                    ]
                },
                "glusterfs": {
                    "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GlusterfsVolumeSource"
                        }
                    ]
                },
                "hostPath": {
                    "description": "hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n---\nTODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\nmount host directories as read/write.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HostPathVolumeSource"
                        }
                    ]
                },
                "iscsi": {
                    "description": "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ISCSIVolumeSource"
                        }
                    ]
                },
                "name": {
                    "description": "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "nfs": {
                    "description": "nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NFSVolumeSource"
                        }
                    ]
                },
                "persistentVolumeClaim": {
                    "description": "persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
                        }
                    ]
                },
                "photonPersistentDisk": {
                    "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PhotonPersistentDiskVolumeSource"
                        }
                    ]
                },
                "portworxVolume": {
                    "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PortworxVolumeSource"
                        }
                    ]
                },
                "projected": {
                    "description": "projected items for all in one resources secrets, configmaps, and downward API",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ProjectedVolumeSource"
                        }
                    ]
                },
                "quobyte": {
                    "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.QuobyteVolumeSource"
                        }
                    ]
                },
                "rbd": {
                    "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RBDVolumeSource"
                        }
                    ]
                },
                "scaleIO": {
                    "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ScaleIOVolumeSource"
                        }
                    ]
                },
                "secret": {
                    "description": "secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretVolumeSource"
                        }
                    ]
                },
                "storageos": {
                    "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StorageOSVolumeSource"
                        }
                    ]
                },
                "vsphereVolume": {
                    "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.VsphereVirtualDiskVolumeSource"
                        }
                    ]
                }
            }
        },
        "v1.VolumeDevice": {
            "type": "object",
            "properties": {
                "devicePath": {
                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                    "type": "string"
                },
                "name": {
                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                    "type": "string"
                }
            }
        },
        "v1.VolumeMount": {
            "type": "object",
            "properties": {
                "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                    "type": "string"
                },
                "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.MountPropagationMode"
                        }
                    ]
                },
                "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "recursiveReadOnly": {
                    "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.\n\n+featureGate=RecursiveReadOnlyMounts\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RecursiveReadOnlyMode"
                        }
                    ]
                },
                "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional",
                    "type": "string"
                },
                "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.VolumeMountStatus": {
            "type": "object",
            "properties": {
                "mountPath": {
                    "description": "MountPath corresponds to the original VolumeMount.",
                    "type": "string"
                },
                "name": {
                    "description": "Name corresponds to the name of the original VolumeMount.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly corresponds to the original VolumeMount.\n+optional",
                    "type": "boolean"
                },
                "recursiveReadOnly": {
                    "description": "RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts).\nAn IfPossible value in the original VolumeMount must be translated to Disabled or Enabled,\ndepending on the mount result.\n+featureGate=RecursiveReadOnlyMounts\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RecursiveReadOnlyMode"
                        }
                    ]
                }
            }
        },
        "v1.VolumeNodeAffinity": {
            "type": "object",
            "properties": {
                "required": {
                    "description": "required specifies hard node constraints that must be met.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelector"
                        }
                    ]
                }
            }
        },
        "v1.VolumeProjection": {
            "type": "object",
            "properties": {
                "clusterTrustBundle": {
                    "description": "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field\nof ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.\n\n+featureGate=ClusterTrustBundleProjection\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ClusterTrustBundleProjection"
                        }
                    ]
                },
                "configMap": {
                    "description": "configMap information about the configMap data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapProjection"
                        }
                    ]
                },
                "downwardAPI": {
                    "description": "downwardAPI information about the downwardAPI data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DownwardAPIProjection"
                        }
                    ]
                },
                "secret": {
                    "description": "secret information about the secret data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretProjection"
                        }
                    ]
                },
                "serviceAccountToken": {
                    "description": "serviceAccountToken is information about the serviceAccountToken data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceAccountTokenProjection"
                        }
                    ]
                }
            }
        },
        "v1.VolumeResourceRequirements": {
            "type": "object",
            "properties": {
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                }
            }
        },
        "v1.VsphereVirtualDiskVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
                    "type": "string"
                },
                "storagePolicyID": {
                    "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n+optional",
                    "type": "string"
                },
                "storagePolicyName": {
                    "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.\n+optional",
                    "type": "string"
                },
                "volumePath": {
                    "description": "volumePath is the path that identifies vSphere volume vmdk",
                    "type": "string"
                }
            }
        },
        "v1.WeightedPodAffinityTerm": {
            "type": "object",
            "properties": {
                "podAffinityTerm": {
                    "description": "Required. A pod affinity term, associated with the corresponding weight.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAffinityTerm"
                        }
                    ]
                },
                "weight": {
                    "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.WindowsSecurityContextOptions": {
            "type": "object",
            "properties": {
                "gmsaCredentialSpec": {
                    "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.\n+optional",
                    "type": "string"
                },
                "gmsaCredentialSpecName": {
                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.\n+optional",
                    "type": "string"
                },
                "hostProcess": {
                    "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.\n+optional",
                    "type": "boolean"
                },
                "runAsUserName": {
                    "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1beta1.Condition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                    "type": "string"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.\nThis field may be empty.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may not be empty.\n+optional",
                    "type": "string"
                },
                "severity": {
                    "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.ConditionSeverity"
                        }
                    ]
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.ConditionType"
                        }
                    ]
                }
            }
        },
        "v1beta1.ConditionSeverity": {
            "type": "string",
            "enum": [
                "Error",
                "Warning",
                "Info",
                ""
            ],
            "x-enum-varnames": [
                "ConditionSeverityError",
                "ConditionSeverityWarning",
                "ConditionSeverityInfo",
                "ConditionSeverityNone"
            ]
        },
        "v1beta1.ConditionType": {
            "type": "string",
            "enum": [
                "Ready",
                "InfrastructureReady",
                "VariablesReconciled",
                "ControlPlaneInitialized",
                "ControlPlaneReady",
                "BootstrapReady",
                "DrainingSucceeded",
                "PreDrainDeleteHookSucceeded",
                "PreTerminateDeleteHookSucceeded",
                "VolumeDetachSucceeded",
                "HealthCheckSucceeded",
                "OwnerRemediated",
                "ExternalRemediationTemplateAvailable",
                "ExternalRemediationRequestAvailable",
                "NodeHealthy",
                "RemediationAllowed",
                "Available",
                "MachineSetReady",
                "MachinesCreated",
                "MachinesReady",
                "Resized",
                "TopologyReconciled",
                "RefVersionsUpToDate"
            ],
            "x-enum-varnames": [
                "ReadyCondition",
                "InfrastructureReadyCondition",
                "ClusterClassVariablesReconciledCondition",
                "ControlPlaneInitializedCondition",
                "ControlPlaneReadyCondition",
                "BootstrapReadyCondition",
                "DrainingSucceededCondition",
                "PreDrainDeleteHookSucceededCondition",
                "PreTerminateDeleteHookSucceededCondition",
                "VolumeDetachSucceededCondition",
                "MachineHealthCheckSucceededCondition",
                "MachineOwnerRemediatedCondition",
                "ExternalRemediationTemplateAvailableCondition",
                "ExternalRemediationRequestAvailableCondition",
                "MachineNodeHealthyCondition",
                "RemediationAllowedCondition",
                "MachineDeploymentAvailableCondition",
                "MachineSetReadyCondition",
                "MachinesCreatedCondition",
                "MachinesReadyCondition",
                "ResizedCondition",
                "TopologyReconciledCondition",
                "ClusterClassRefVersionsUpToDateCondition"
            ]
        },
        "v1beta1.FailureDomainSpec": {
            "type": "object",
            "properties": {
                "attributes": {
                    "description": "Attributes is a free form map of attributes an infrastructure provider might use or require.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "controlPlane": {
                    "description": "ControlPlane determines if this failure domain is suitable for use by control plane machines.\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1beta1.FailureDomains": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/v1beta1.FailureDomainSpec"
            }
        },
        "v1beta1.KubeadmControlPlaneStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions defines current service state of the KubeadmControlPlane.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.Condition"
                    }
                },
                "failureMessage": {
                    "description": "ErrorMessage indicates that there is a terminal problem reconciling the\nstate, and will be set to a descriptive error message.\n+optional",
                    "type": "string"
                },
                "failureReason": {
                    "description": "FailureReason indicates that there is a terminal problem reconciling the\nstate, and will be set to a token value suitable for\nprogrammatic interpretation.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/errors.KubeadmControlPlaneStatusError"
                        }
                    ]
                },
                "initialized": {
                    "description": "Initialized denotes whether or not the control plane has the\nuploaded kubeadm-config configmap.\n+optional",
                    "type": "boolean"
                },
                "lastRemediation": {
                    "description": "LastRemediation stores info about last remediation performed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.LastRemediationStatus"
                        }
                    ]
                },
                "observedGeneration": {
                    "description": "ObservedGeneration is the latest generation observed by the controller.\n+optional",
                    "type": "integer"
                },
                "ready": {
                    "description": "Ready denotes that the KubeadmControlPlane API Server is ready to\nreceive requests.\n+optional",
                    "type": "boolean"
                },
                "readyReplicas": {
                    "description": "Total number of fully running and ready control plane machines.\n+optional",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Total number of non-terminated machines targeted by this control plane\n(their labels match the selector).\n+optional",
                    "type": "integer"
                },
                "selector": {
                    "description": "Selector is the label selector in string format to avoid introspection\nby clients, and is used to provide the CRD-based integration for the\nscale subresource and additional integrations for things like kubectl\ndescribe.. The string will be in the same format as the query-param syntax.\nMore info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors\n+optional",
                    "type": "string"
                },
                "unavailableReplicas": {
                    "description": "Total number of unavailable machines targeted by this control plane.\nThis is the total number of machines that are still required for\nthe deployment to have 100% available capacity. They may either\nbe machines that are running but not yet ready or machines\nthat still have not been created.\n+optional",
                    "type": "integer"
                },
                "updatedReplicas": {
                    "description": "Total number of non-terminated machines targeted by this control plane\nthat have the desired template spec.\n+optional",
                    "type": "integer"
                },
                "version": {
                    "description": "Version represents the minimum Kubernetes version for the control plane machines\nin the cluster.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1beta1.LastRemediationStatus": {
            "type": "object",
            "properties": {
                "machine": {
                    "description": "Machine is the machine name of the latest machine being remediated.",
                    "type": "string"
                },
                "retryCount": {
                    "description": "RetryCount used to keep track of remediation retry for the last remediated machine.\nA retry happens when a machine that was created as a replacement for an unhealthy machine also fails.",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "Timestamp is when last remediation happened. It is represented in RFC3339 form and is in UTC.",
                    "type": "string"
                }
            }
        },
        "v1beta1.MachineDeploymentStatus": {
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available machines (ready for at least minReadySeconds)\ntargeted by this deployment.\n+optional",
                    "type": "integer"
                },
                "conditions": {
                    "description": "Conditions defines current service state of the MachineDeployment.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.Condition"
                    }
                },
                "observedGeneration": {
                    "description": "The generation observed by the deployment controller.\n+optional",
                    "type": "integer"
                },
                "phase": {
                    "description": "Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).\n+optional",
                    "type": "string"
                },
                "readyReplicas": {
                    "description": "Total number of ready machines targeted by this deployment.\n+optional",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Total number of non-terminated machines targeted by this deployment\n(their labels match the selector).\n+optional",
                    "type": "integer"
                },
                "selector": {
                    "description": "Selector is the same as the label selector but in the string format to avoid introspection\nby clients. The string will be in the same format as the query-param syntax.\nMore info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors\n+optional",
                    "type": "string"
                },
                "unavailableReplicas": {
                    "description": "Total number of unavailable machines targeted by this deployment.\nThis is the total number of machines that are still required for\nthe deployment to have 100% available capacity. They may either\nbe machines that are running but not yet available or machines\nthat still have not been created.\n+optional",
                    "type": "integer"
                },
                "updatedReplicas": {
                    "description": "Total number of non-terminated machines targeted by this deployment\nthat have the desired template spec.\n+optional",
                    "type": "integer"
                }
            }
        }
    }
}